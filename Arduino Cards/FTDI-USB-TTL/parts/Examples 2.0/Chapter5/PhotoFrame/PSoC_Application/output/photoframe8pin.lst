0000: 80 67    JMP   0x0068
0002: 30       HALT  
0003: 30       HALT  

FILE: .\boot.asm
                                   (0001) ; Generated by PSoC Designer ver 4.3  b1884 : 23 June, 2006
                                   (0002) ;
                                   (0003) ;@Id: boot.tpl#161 @
                                   (0004) ;=============================================================================
                                   (0005) ;  FILENAME:   boot.asm
                                   (0006) ;  VERSION:    4.15
                                   (0007) ;  DATE:       2 August 2004
                                   (0008) ;
                                   (0009) ;  DESCRIPTION:
                                   (0010) ;  M8C Boot Code for CY8C24xxxB microcontroller family.
                                   (0011) ;
                                   (0012) ;  Copyright (C) Cypress MicroSystems 2000-2004. All rights reserved.
                                   (0013) ;
                                   (0014) ; NOTES:
                                   (0015) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                   (0016) ; the project's root directory to create BOOT.ASM. Any changes made to
                                   (0017) ; BOOT.ASM will be  overwritten every time the project is generated; therfore
                                   (0018) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                   (0019) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                   (0020) ; are not accidentally modified.
                                   (0021) ;
                                   (0022) ;=============================================================================
                                   (0023) 
                                   (0024) include ".\lib\GlobalParams.inc"
                                   (0025) include "m8c.inc"
                                   (0026) include "m8ssc.inc"
                                   (0027) include "memory.inc"
                                   (0028) 
                                   (0029) ;--------------------------------------
                                   (0030) ; Export Declarations
                                   (0031) ;--------------------------------------
                                   (0032) 
                                   (0033) export __Start
                                   (0034) export __bss_start
                                   (0035) export __data_start
                                   (0036) export __idata_start
                                   (0037) export __func_lit_start
                                   (0038) export __text_start
                                   (0039) export  _bGetPowerSetting
                                   (0040) export   bGetPowerSetting
                                   (0041) 
                                   (0042) 
                                   (0043) ;--------------------------------------
                                   (0044) ; Optimization flags
                                   (0045) ;--------------------------------------
                                   (0046) ;
                                   (0047) ; To change the value of these flags, modify the file boot.tpl, not
                                   (0048) ; boot.asm. See the notes in the banner comment at the beginning of
                                   (0049) ; this file.
                                   (0050) 
                                   (0051) ; Optimization for Assembly language (only) projects and C-language projects
                                   (0052) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                   (0053) ;   Set to 1: Support for C Run-time Environment initialization
                                   (0054) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                   (0055) ;
                                   (0056) C_LANGUAGE_SUPPORT:              equ 1
                                   (0057) 
                                   (0058) 
                                   (0059) ; The following equate is required for proper operation. Reseting its value
                                   (0060) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                   (0061) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                   (0062) ; and PLL_Lock must take place within user code. See the family data sheet for
                                   (0063) ; the requirements of starting the ECO and PLL lock mode.
                                   (0064) ;
                                   (0065) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                   (0066) ;                invoking main
                                   (0067) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                   (0068) ;               the time code in main starts executing.
                                   (0069) ;
                                   (0070) WAIT_FOR_32K:                    equ 1
                                   (0071) 
                                   (0072) 
                                   (0073) ; For historical reasons, by default the boot code uses an lcall instruction
                                   (0074) ; to invoke the user's _main code. If _main executes a return instruction,
                                   (0075) ; boot provides an infinite loop. By changing the following equate from zero
                                   (0076) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                   (0077) ; bytes on the stack which are otherwise required for the return address. If
                                   (0078) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                   (0079) ; release, the C compiler automatically places an infinite loop at the end
                                   (0080) ; of main, rather than a return instruction.)
                                   (0081) ;
                                   (0082) ENABLE_LJMP_TO_MAIN:             equ 0
                                   (0083) 
                                   (0084) 
                                   (0085) ;-----------------------------------------------------------------------------
                                   (0086) ; Interrupt Vector Table
                                   (0087) ;-----------------------------------------------------------------------------
                                   (0088) ;
                                   (0089) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                   (0090) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                   (0091) ; very short ISRs could be encoded within the table itself. Normally,
                                   (0092) ; vector jump targets are modified automatically according to the user
                                   (0093) ; modules selected. This occurs when the 'Generate Application' opera-
                                   (0094) ; tion is run causing PSoC Designer to create boot.asm and the other
                                   (0095) ; configuration files. If you need to hard code a vector, update the
                                   (0096) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                   (0097) ; of this file.
                                   (0098) ;-----------------------------------------------------------------------------
                                   (0099) 
                                   (0100)     AREA TOP (ROM, ABS, CON)
                                   (0101) 
                                   (0102)     org   0                        ;Reset Interrupt Vector
                                   (0103)     jmp   __Start                  ;First instruction executed following a Reset
                                   (0104) 
                                   (0105)     org   04h                      ;Supply Monitor Interrupt Vector
0004: 30       HALT                (0106)     halt                           ;Stop execution if power falls too low
0005: 30       HALT  
0006: 30       HALT  
0007: 30       HALT  
                                   (0107) 
                                   (0108)     org   08h                      ;Analog Column 0 Interrupt Vector
                                   (0109)     // call	void_handler
0008: 7E       RETI                (0110)     reti
0009: 30       HALT  
000A: 30       HALT  
000B: 30       HALT  
                                   (0111) 
                                   (0112)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                   (0113)     // call	void_handler
000C: 7E       RETI                (0114)     reti
000D: 30       HALT  
000E: 30       HALT  
000F: 30       HALT  
0010: 30       HALT  
0011: 30       HALT  
0012: 30       HALT  
0013: 30       HALT  
0014: 30       HALT  
0015: 30       HALT  
0016: 30       HALT  
0017: 30       HALT  
                                   (0115) 
                                   (0116)     org   18h                      ;VC3 Interrupt Vector
0018: 7D 04 35 LJMP  __text_start  (0117)     ljmp _OneMillisecond_ISR
001B: 7E       RETI                (0118)     reti
                                   (0119) 
                                   (0120)     org   1Ch                      ;GPIO Interrupt Vector
                                   (0121)     // call	void_handler
001C: 7E       RETI                (0122)     reti
001D: 30       HALT  
001E: 30       HALT  
001F: 30       HALT  
                                   (0123) 
                                   (0124)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                   (0125)     // call	void_handler
0020: 7E       RETI                (0126)     reti
0021: 30       HALT  
0022: 30       HALT  
0023: 30       HALT  
                                   (0127) 
                                   (0128)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                   (0129)     // call	void_handler
0024: 7E       RETI                (0130)     reti
0025: 30       HALT  
0026: 30       HALT  
0027: 30       HALT  
                                   (0131) 
                                   (0132)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 02 FF LJMP  0x02FF        (0133)     ljmp	_UART_TX_ISR
002B: 7E       RETI                (0134)     reti
                                   (0135) 
                                   (0136)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 03 00 LJMP  0x0300        (0137)     ljmp	_UART_RX_ISR
002F: 7E       RETI                (0138)     reti
0030: 30       HALT  
0031: 30       HALT  
0032: 30       HALT  
0033: 30       HALT  
0034: 30       HALT  
0035: 30       HALT  
0036: 30       HALT  
0037: 30       HALT  
0038: 30       HALT  
0039: 30       HALT  
003A: 30       HALT  
003B: 30       HALT  
003C: 30       HALT  
003D: 30       HALT  
003E: 30       HALT  
003F: 30       HALT  
0040: 30       HALT  
0041: 30       HALT  
0042: 30       HALT  
0043: 30       HALT  
0044: 30       HALT  
0045: 30       HALT  
0046: 30       HALT  
0047: 30       HALT  
0048: 30       HALT  
0049: 30       HALT  
004A: 30       HALT  
004B: 30       HALT  
004C: 30       HALT  
004D: 30       HALT  
004E: 30       HALT  
004F: 30       HALT  
0050: 30       HALT  
0051: 30       HALT  
0052: 30       HALT  
0053: 30       HALT  
0054: 30       HALT  
0055: 30       HALT  
0056: 30       HALT  
0057: 30       HALT  
0058: 30       HALT  
0059: 30       HALT  
005A: 30       HALT  
005B: 30       HALT  
005C: 30       HALT  
005D: 30       HALT  
005E: 30       HALT  
005F: 30       HALT  
                                   (0139) 
                                   (0140)     org   60h                      ;PSoC I2C Interrupt Vector
                                   (0141)     // call	void_handler
0060: 7E       RETI                (0142)     reti
0061: 30       HALT  
0062: 30       HALT  
0063: 30       HALT  
                                   (0143) 
                                   (0144)     org   64h                      ;Sleep Timer Interrupt Vector
                                   (0145)     // call	void_handler
0064: 7E       RETI                (0146)     reti
0065: 30       HALT  
0066: 30       HALT  
0067: 30       HALT  
                                   (0147) 
                                   (0148) ;-----------------------------------------------------------------------------
                                   (0149) ;  Start of Execution.
                                   (0150) ;-----------------------------------------------------------------------------
                                   (0151) ;  The Supervisory ROM SWBootReset function has already completed the
                                   (0152) ;  calibrate1 process, loading trim values for 5 volt operation.
                                   (0153) ;
                                   (0154)     org 68h
                                   (0155) __Start:
                                   (0156) 
                                   (0157)     ; initialize SMP values for voltage stabilization, if required,
                                   (0158)     ; leaving power-on reset (POR) level at the default (low) level, at
                                   (0159)     ; least for now. 
                                   (0160)     ;
0068: 71 10    OR    F,16          (0161)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[227],135  (0162)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,239         (0163)     M8C_SetBank0
                                   (0164) 
                                   (0165) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                   (0166)     M8C_EnableWatchDog
                                   (0167) ENDIF
                                   (0168) 
                                   (0169) IF ( SELECT_32K )
                                   (0170)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                   (0171) ELSE
006F: 41 FE FB AND   REG[254],251  (0172)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                   (0173) ENDIF
                                   (0174) 
                                   (0175)     ;------------------
                                   (0176)     ; Set up the stack
                                   (0177)     ;------------------
0072: 50 53    MOV   A,83          (0178)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0074: 4E       SWAP  SP,A          (0179)     swap  SP, A                    ; This is only temporary if going to LMM
                                   (0180) 
                                   (0181)     ;-----------------------------------------------
                                   (0182)     ; Set Power-related Trim & the AGND Bypass bit.
                                   (0183)     ;-----------------------------------------------
                                   (0184) 
                                   (0185) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                   (0186)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                   (0187)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0188)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                   (0189)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                   (0190)   IF ( AGND_BYPASS )
                                   (0191)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0192)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                   (0193)     ; bit in the write-only BDG_TR register. Recalculate the register
                                   (0194)     ; value using the proper trim values.
                                   (0195)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0196)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                   (0197)   ENDIF
                                   (0198)  ENDIF
                                   (0199) ENDIF ; 5.0 V Operation
                                   (0200) 
                                   (0201) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                   (0202)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                   (0203)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0204)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                   (0205)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                   (0206)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                   (0207)  ENDIF
                                   (0208) ENDIF ; 3.3 Volt Operation
                                   (0209) 
                                   (0210) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                   (0211)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0212)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V, AGND_BYPASS_JUST
                                   (0213) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                   (0214) 
                                   (0215) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                   (0216)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0217)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V, AGND_BYPASS_JUST
                                   (0218) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                   (0219) 
0075: 55 F8 00 MOV   [248],0       (0220)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0078: 55 F9 00 MOV   [249],0       (0221)     mov  [bSSC_KEYSP], 0
                                   (0222) 
                                   (0223)     ;---------------------------------------
                                   (0224)     ; Initialize Crystal Oscillator and PLL
                                   (0225)     ;---------------------------------------
                                   (0226) 
                                   (0227) IF ( SELECT_32K & WAIT_FOR_32K )
                                   (0228)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                   (0229)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                   (0230)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                   (0231)     ; the ECO to stabilize.
                                   (0232)     ;
                                   (0233)     M8C_SetBank1
                                   (0234)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                   (0235)     M8C_SetBank0
                                   (0236)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                   (0237)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                   (0238)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                   (0239) .WaitFor1s:
                                   (0240)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                   (0241)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                   (0242)                                           ;   since interrupts are not globally enabled
                                   (0243) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                   (0244)     ; Either no ECO, or waiting for stable clock is to be done in main
007B: 71 10    OR    F,16          (0245)     M8C_SetBank1
007D: 62 E0 02 MOV   REG[224],2    (0246)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0080: 70 EF    AND   F,239         (0247)     M8C_SetBank0
0082: 62 E3 38 MOV   REG[227],56   (0248)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                   (0249) 
                                   (0250) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                   (0251) 
                                   (0252) IF ( PLL_MODE )
                                   (0253)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                   (0254)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                   (0255)     ;
                                   (0256)     M8C_SetBank1
                                   (0257)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                   (0258)     M8C_SetBank0
                                   (0259)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                   (0260)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                   (0261) 
                                   (0262) .WaitFor16ms:
                                   (0263)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                   (0264)     jz   .WaitFor16ms
                                   (0265)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                   (0266)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                   (0267)     M8C_SetBank0
                                   (0268) 
                                   (0269) IF      ( WAIT_FOR_32K )
                                   (0270) ELSE ; !( WAIT_FOR_32K )
                                   (0271)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                   (0272)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                   (0273) ENDIF ;(WAIT_FOR_32K)
                                   (0274) ENDIF ;(PLL_MODE)
                                   (0275) 
                                   (0276)     ;------------------------
                                   (0277)     ; Close CT leakage path.
                                   (0278)     ;------------------------
0085: 62 71 05 MOV   REG[113],5    (0279)     mov   reg[ACB00CR0], 05h
0088: 62 75 05 MOV   REG[117],5    (0280)     mov   reg[ACB01CR0], 05h
                                   (0281) 
                                   (0282) ; Set Port0 high so that the TX line does not glitch low during initialization
008B: 62 00 FF MOV   REG[0],255    (0283) 	mov   reg[PRT0DR], 0xff
                                   (0284) ; End of J.Hyde add
                                   (0285) 
                                   (0286)     ;-------------------------
                                   (0287)     ; Load Base Configuration
                                   (0288)     ;-------------------------
                                   (0289)     ; Load global parameter settings and load the user modules in the
                                   (0290)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                   (0291)     ; to minimize start up time; (2) We may still need to play with the
                                   (0292)     ; Sleep Timer.
                                   (0293)     ;
008E: 7C 02 A1 LCALL 0x02A1        (0294)     lcall LoadConfigInit
                                   (0295) 
                                   (0296)     ;-----------------------------------
                                   (0297)     ; Initialize C Run-Time Environment
                                   (0298)     ;-----------------------------------
                                   (0299) IF ( C_LANGUAGE_SUPPORT )
0091: 50 00    MOV   A,0           (0300)     mov  A,0                           ; clear the 'bss' segment to zero
0093: 55 09 0A MOV   [__r0],10     (0301)     mov  [__r0],<__bss_start
                                   (0302) BssLoop:
0096: 3C 09 53 CMP   [9],83        (0303)     cmp  [__r0],<__bss_end
0099: A0 05    JZ    0x009F        (0304)     jz   BssDone
009B: 3F 09    MVI   [__r0],A      (0305)     mvi  [__r0],A
009D: 8F F8    JMP   0x0096        (0306)     jmp  BssLoop
                                   (0307) BssDone:
009F: 50 02    MOV   A,2           (0308)     mov  A,>__idata_start              ; copy idata to data segment
00A1: 57 A1    MOV   X,161         (0309)     mov  X,<__idata_start
00A3: 55 09 00 MOV   [__r0],0      (0310)     mov  [__r0],<__data_start
                                   (0311) IDataLoop:
00A6: 3C 09 00 CMP   [9],0         (0312)     cmp  [__r0],<__data_end
00A9: A0 0B    JZ    0x00B5        (0313)     jz   C_RTE_Done
00AB: 08       PUSH  A             (0314)     push A
00AC: 28       ROMX                (0315)     romx
00AD: 3F 09    MVI   [__r0],A      (0316)     mvi  [__r0],A
00AF: 18       POP   A             (0317)     pop  A
00B0: 75       INC   X             (0318)     inc  X
00B1: 09 00    ADC   A,0           (0319)     adc  A,0
00B3: 8F F2    JMP   0x00A6        (0320)     jmp  IDataLoop
                                   (0321) 
                                   (0322) C_RTE_Done:
                                   (0323) 
                                   (0324) ENDIF ; C_LANGUAGE_SUPPORT
                                   (0325) 
                                   (0326)     ;-------------------------------
                                   (0327)     ; Voltage Stabilization for SMP
                                   (0328)     ;-------------------------------
                                   (0329) 
                                   (0330) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                   (0331) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                   (0332)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0333)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                   (0334)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                   (0335)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0336)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                   (0337)     M8C_SetBank1
                                   (0338)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                   (0339)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                   (0340)     M8C_SetBank0
                                   (0341)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                   (0342)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                   (0343) .WaitFor2ms:
                                   (0344)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                   (0345)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                   (0346) ENDIF ; SMP is operational
                                   (0347) ENDIF ; 5.0V Operation
                                   (0348) 
                                   (0349)     ;-------------------------------
                                   (0350)     ; Set Power-On Reset (POR) Level
                                   (0351)     ;-------------------------------
00B5: 71 10    OR    F,16          (0352)     M8C_SetBank1
                                   (0353) 
                                   (0354) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                   (0355)                                                ;  Yes, lowest trip already set
                                   (0356) ELSE                                           ;   No, must adjust POR...
                                   (0357) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                   (0358)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
                                   (0359) ELSE
                                   (0360) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                   (0361)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                   (0362)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                   (0363)  ELSE                                          ;    No, fast mode
                                   (0364)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
                                   (0365)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
                                   (0366)   ELSE ; 24HMz                                 ;
00B7: 43 E3 20 OR    REG[227],32   (0367)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                   (0368)   ENDIF ; 24MHz
                                   (0369)  ENDIF ; Slow Mode
                                   (0370) ENDIF ; 5.0V Operation
                                   (0371) ENDIF ; 3.3V Operation
                                   (0372) ENDIF ; 2.7V Operation
                                   (0373) 
00BA: 70 EF    AND   F,239         (0374)     M8C_SetBank0
                                   (0375) 
                                   (0376)     ;----------------------------
                                   (0377)     ; Wrap up and invoke "main"
                                   (0378)     ;----------------------------
                                   (0379) 
                                   (0380)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                   (0381)     ; no interrupts should be enabled now, so may as well clear the register.
                                   (0382)     ;
00BC: 62 E0 00 MOV   REG[224],0    (0383)     mov  reg[INT_MSK0],0
                                   (0384) 
                                   (0385)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                   (0386)     ;
00BF: 71 10    OR    F,16          (0387)     M8C_SetBank1
00C1: 62 E0 03 MOV   REG[224],3    (0388)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00C4: 70 EF    AND   F,239         (0389)     M8C_SetBank0
                                   (0390) 
                                   (0391)     ; Global Interrupt are NOT enabled, this should be done in main().
                                   (0392)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                   (0393)     ; Global Interrupts should be enabled as soon as possible in main().
                                   (0394)     ;
00C6: 62 E2 00 MOV   REG[226],0    (0395)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                   (0396)                                    ; have been set during the boot process.
                                   (0397) IF ENABLE_LJMP_TO_MAIN
                                   (0398)     ljmp  _main                    ; goto main (no return)
                                   (0399) ELSE
00C9: 7C 07 A5 LCALL _main         (0400)     lcall _main                    ; call main
                                   (0401) .Exit:
00CC: 8F FF    JMP   0x00CC        (0402)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                   (0403) ENDIF
                                   (0404) 
                                   (0405)     ;---------------------------------
                                   (0406)     ; Library Access to Global Parms
                                   (0407)     ;---------------------------------
                                   (0408)     ;
                                   (0409)  bGetPowerSetting:
                                   (0410) _bGetPowerSetting:
                                   (0411)     ; Returns value of POWER_SETTING in the A register.
                                   (0412)     ; No inputs. No Side Effects.
                                   (0413)     ;
                                   (0414) IF (POWER_SETTING & POWER_SET_2V7)
                                   (0415)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                   (0416) ELSE
00CE: 50 10    MOV   A,16          (0417)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                   (0418) ENDIF
00D0: 7F       RET                 (0419)     ret
00D1: 30       HALT  
00D2: 30       HALT  
00D3: 30       HALT  
00D4: 30       HALT  
00D5: 30       HALT  
00D6: 30       HALT  
00D7: 30       HALT  
00D8: 30       HALT  
00D9: 30       HALT  
00DA: 30       HALT  
00DB: 30       HALT  
00DC: 30       HALT  
00DD: 30       HALT  
00DE: 30       HALT  
00DF: 30       HALT  
00E0: 30       HALT  
00E1: 30       HALT  
00E2: 30       HALT  
00E3: 30       HALT  
00E4: 30       HALT  
00E5: 30       HALT  
00E6: 30       HALT  
00E7: 30       HALT  
00E8: 30       HALT  
00E9: 30       HALT  
00EA: 30       HALT  
00EB: 30       HALT  
00EC: 30       HALT  
00ED: 30       HALT  
00EE: 30       HALT  
00EF: 30       HALT  
00F0: 30       HALT  
00F1: 30       HALT  
00F2: 30       HALT  
00F3: 30       HALT  
00F4: 30       HALT  
00F5: 30       HALT  
00F6: 30       HALT  
00F7: 30       HALT  
00F8: 30       HALT  
00F9: 30       HALT  
00FA: 30       HALT  
00FB: 30       HALT  
00FC: 30       HALT  
00FD: 30       HALT  
00FE: 30       HALT  
00FF: 30       HALT  
0100: 30       HALT  
0101: 30       HALT  
0102: 30       HALT  
0103: 30       HALT  
0104: 30       HALT  
0105: 30       HALT  
0106: 30       HALT  
0107: 30       HALT  
0108: 30       HALT  
0109: 30       HALT  
010A: 30       HALT  
010B: 30       HALT  
010C: 30       HALT  
010D: 30       HALT  
010E: 30       HALT  
010F: 30       HALT  
0110: 30       HALT  
0111: 30       HALT  
0112: 30       HALT  
0113: 30       HALT  
0114: 30       HALT  
0115: 30       HALT  
0116: 30       HALT  
0117: 30       HALT  
0118: 30       HALT  
0119: 30       HALT  
011A: 30       HALT  
011B: 30       HALT  
011C: 30       HALT  
011D: 30       HALT  
011E: 30       HALT  
011F: 30       HALT  
0120: 30       HALT  
0121: 30       HALT  
0122: 30       HALT  
0123: 30       HALT  
0124: 30       HALT  
0125: 30       HALT  
0126: 30       HALT  
0127: 30       HALT  
0128: 30       HALT  
0129: 30       HALT  
012A: 30       HALT  
012B: 30       HALT  
012C: 30       HALT  
012D: 30       HALT  
012E: 30       HALT  
012F: 30       HALT  
0130: 30       HALT  
0131: 30       HALT  
0132: 30       HALT  
0133: 30       HALT  
0134: 30       HALT  
0135: 30       HALT  
0136: 30       HALT  
0137: 30       HALT  
0138: 30       HALT  
0139: 30       HALT  
013A: 30       HALT  
013B: 30       HALT  
013C: 30       HALT  
013D: 30       HALT  
013E: 30       HALT  
013F: 30       HALT  
0140: 30       HALT  
0141: 30       HALT  
0142: 30       HALT  
0143: 30       HALT  
0144: 30       HALT  
0145: 30       HALT  
0146: 30       HALT  
0147: 30       HALT  
0148: 30       HALT  
0149: 30       HALT  
014A: 30       HALT  
014B: 30       HALT  
014C: 30       HALT  
014D: 30       HALT  
014E: 30       HALT  
014F: 30       HALT  
0150: 30       HALT  
0151: 30       HALT  
0152: 30       HALT  
0153: 30       HALT  
0154: 30       HALT  
0155: 30       HALT  
0156: 30       HALT  
0157: 30       HALT  
0158: 30       HALT  
0159: 30       HALT  
015A: 30       HALT  
015B: 30       HALT  
015C: 30       HALT  
015D: 30       HALT  
015E: 30       HALT  
015F: 30       HALT  
0160: 30       HALT  
0161: 30       HALT  
0162: 30       HALT  
0163: 30       HALT  
0164: 30       HALT  
0165: 30       HALT  
0166: 30       HALT  
0167: 30       HALT  
0168: 30       HALT  
0169: 30       HALT  
016A: 30       HALT  
016B: 30       HALT  
016C: 30       HALT  
016D: 30       HALT  
016E: 30       HALT  
016F: 30       HALT  
0170: 30       HALT  
0171: 30       HALT  
0172: 30       HALT  
0173: 30       HALT  
0174: 30       HALT  
0175: 30       HALT  
0176: 30       HALT  
0177: 30       HALT  
0178: 30       HALT  
0179: 30       HALT  
017A: 30       HALT  
017B: 30       HALT  
017C: 30       HALT  
017D: 30       HALT  
017E: 30       HALT  
017F: 30       HALT  
0180: 30       HALT  
0181: 30       HALT  
0182: 30       HALT  
0183: 30       HALT  
0184: 30       HALT  
0185: 30       HALT  
0186: 30       HALT  
0187: 30       HALT  
0188: 30       HALT  
0189: 30       HALT  
018A: 30       HALT  
018B: 30       HALT  
018C: 30       HALT  
018D: 30       HALT  
018E: 30       HALT  
018F: 30       HALT  
0190: 30       HALT  
0191: 30       HALT  
0192: 30       HALT  
0193: 30       HALT  
0194: 30       HALT  
0195: 30       HALT  
0196: 30       HALT  
0197: 30       HALT  
0198: 30       HALT  
0199: 30       HALT  
019A: 30       HALT  
019B: 30       HALT  
019C: 30       HALT  
019D: 30       HALT  
019E: 30       HALT  
019F: 30       HALT  
01A0: 50 68    MOV   A,104
01A2: 6F 74    RRC   [X+116]
01A4: 6F 46    RRC   [X+70]
01A6: 72 61    XOR   F,97
01A8: 6D       RRC   A
01A9: 65 20    ASL   [32]
01AB: 56 30 2E MOV   [X+48],46
01AE: 33 00    XOR   A,[X+0]
01B0: 4E       SWAP  SP,A
01B1: 6F 20    RRC   [X+32]
01B3: 46 6C 61 XOR   REG[X+108],97
01B6: 73       CPL   A
01B7: 68 20    ASR   [32]
01B9: 44 72 69 OR    REG[X+114],105
01BC: 76 65    INC   [101]
01BE: 00       SWI   
01BF: 4E       SWAP  SP,A
01C0: 6F 20    RRC   [X+32]
01C2: 2E 49 4D OR    [73],77
01C5: 47 20 66 TST   [32],102
01C8: 69 6C    ASR   [X+108]
01CA: 65 73    ASL   [115]
01CC: 20       POP   X
01CD: 00       SWI   
01CE: 53 42    MOV   [66],A
01D0: 44 20 18 OR    REG[X+32],24
01D3: 00       SWI   
01D4: 00       SWI   
01D5: 0D 00    ADC   [X+0],A
01D7: 44 49 52 OR    REG[X+73],82
01DA: 20       POP   X
01DB: 30       HALT  
01DC: 30       HALT  
01DD: 30       HALT  
01DE: 2E 69 6D OR    [105],109
01E1: 67       ASR   A
01E2: 0D 00    ADC   [X+0],A
01E4: 44 49 52 OR    REG[X+73],82
01E7: 20       POP   X
01E8: 00       SWI   
01E9: 00       SWI   
01EA: 00       SWI   
01EB: 2E 6D 70 OR    [109],112
01EE: 33 0D    XOR   A,[X+13]
01F0: 00       SWI   

FILE: lib\psocconfigtbl.asm
                                   (0001) ; Generated by PSoC Designer ver 4.3  b1884 : 23 June, 2006
                                   (0002) ;
                                   (0003) include "m8c.inc"
                                   (0004) ;  Personalization tables 
                                   (0005) export LoadConfigTBL_photoframe8pin_Bank1
                                   (0006) export LoadConfigTBL_photoframe8pin_Bank0
                                   (0007) export LoadConfigTBL_photoframe8pin_Ordered
                                   (0008) AREA lit(rom, rel)
                                   (0009) LoadConfigTBL_photoframe8pin_Ordered:
                                   (0010) ;  Ordered Global Register values
01F1: 71 10    OR    F,16          (0011) 	M8C_SetBank1
01F3: 62 00 0C MOV   REG[0],12     (0012) 	mov	reg[00h], 0ch		; Port_0_DriveMode_0 register (PRT0DM0)
01F6: 62 01 30 MOV   REG[1],48     (0013) 	mov	reg[01h], 30h		; Port_0_DriveMode_1 register (PRT0DM1)
01F9: 70 EF    AND   F,239         (0014) 	M8C_SetBank0
01FB: 62 03 00 MOV   REG[3],0      (0015) 	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
01FE: 62 02 3C MOV   REG[2],60     (0016) 	mov	reg[02h], 3ch		; Port_0_GlobalSelect register (PRT0GS)
0201: 71 10    OR    F,16          (0017) 	M8C_SetBank1
0203: 62 02 00 MOV   REG[2],0      (0018) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0206: 62 03 00 MOV   REG[3],0      (0019) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0209: 70 EF    AND   F,239         (0020) 	M8C_SetBank0
020B: 62 01 00 MOV   REG[1],0      (0021) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
020E: 71 10    OR    F,16          (0022) 	M8C_SetBank1
0210: 62 04 03 MOV   REG[4],3      (0023) 	mov	reg[04h], 03h		; Port_1_DriveMode_0 register (PRT1DM0)
0213: 62 05 00 MOV   REG[5],0      (0024) 	mov	reg[05h], 00h		; Port_1_DriveMode_1 register (PRT1DM1)
0216: 70 EF    AND   F,239         (0025) 	M8C_SetBank0
0218: 62 07 00 MOV   REG[7],0      (0026) 	mov	reg[07h], 00h		; Port_1_DriveMode_2 register (PRT1DM2)
021B: 62 06 00 MOV   REG[6],0      (0027) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
021E: 71 10    OR    F,16          (0028) 	M8C_SetBank1
0220: 62 06 00 MOV   REG[6],0      (0029) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0223: 62 07 00 MOV   REG[7],0      (0030) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0226: 70 EF    AND   F,239         (0031) 	M8C_SetBank0
0228: 62 05 00 MOV   REG[5],0      (0032) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
022B: 71 10    OR    F,16          (0033) 	M8C_SetBank1
022D: 62 08 00 MOV   REG[8],0      (0034) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
0230: 62 09 00 MOV   REG[9],0      (0035) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
0233: 70 EF    AND   F,239         (0036) 	M8C_SetBank0
0235: 62 0B 00 MOV   REG[11],0     (0037) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
0238: 62 0A 00 MOV   REG[10],0     (0038) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
023B: 71 10    OR    F,16          (0039) 	M8C_SetBank1
023D: 62 0A 00 MOV   REG[10],0     (0040) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0240: 62 0B 00 MOV   REG[11],0     (0041) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0243: 70 EF    AND   F,239         (0042) 	M8C_SetBank0
0245: 62 09 00 MOV   REG[9],0      (0043) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0248: 7F       RET                 (0044) 	ret
0249: 60 09    MOV   REG[9],A
024B: 66 00    ASL   [X+0]
024D: 63 05 65 MOV   REG[X+5],101
0250: 00       SWI   
0251: E6 00    JACC  0x0852
0253: E7 00    JACC  0x0954
0255: D6 00    JNC   0x0856
0257: B0 05    JNZ   0x025D
0259: B1 00    JNZ   0x035A
025B: B2 00    JNZ   0x045C
025D: B3 33    JNZ   0x0591
025F: B4 33    JNZ   0x0693
0261: B5 00    JNZ   0x0762
0263: B6 11    JNZ   0x0875
0265: 2F 00 2D OR    [X+0],45
0268: 00       SWI   
0269: 2E 00 2B OR    [__rY],43
026C: 00       SWI   
026D: 29 00    OR    A,0
026F: 2A 00    OR    A,[0]
0271: FF 61    INDEX 0x01D4
0273: 00       SWI   
0274: 69 00    ASR   [X+0]
0276: 60 00    MOV   REG[0],A
0278: 62 00 67 MOV   REG[0],103
027B: 33 68    XOR   A,[X+104]
027D: 00       SWI   
027E: 63 00 66 MOV   REG[X+0],102
0281: 00       SWI   
0282: D1 00    JNC   0x0383
0284: D3 00    JNC   0x0585
0286: D0 00    JNC   0x0287
0288: D2 00    JNC   0x0489
028A: E1 B1    JACC  0x043C
028C: E2 00    JACC  0x048D
028E: DF 19    JNC   0x01A8
0290: DE 01    JNC   0x0092
0292: DD 00    JNC   0xFF93
0294: 2C 05    OR    [__r4],A
0296: 2D D1    OR    [X-47],A
0298: 2E 40 28 OR    [64],40
029B: 1D 29    SBB   [X+41],A
029D: 01 2A    ADD   A,42
029F: 47 FF 7C TST   [255],124

FILE: lib\psocconfig.asm
                                   (0001) ; Generated by PSoC Designer ver 4.3  b1884 : 23 June, 2006
                                   (0002) ;
                                   (0003) ;==========================================================================
                                   (0004) ;  PSoCConfig.asm
                                   (0005) ;  @PSOC_VERSION
                                   (0006) ;
                                   (0007) ;  Version: 0.85
                                   (0008) ;  Revised: June 22, 2004
                                   (0009) ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0010) ;
                                   (0011) ;  This file is generated by the Device Editor on Application Generation.
                                   (0012) ;  It contains code which loads the configuration data table generated in
                                   (0013) ;  the file PSoCConfigTBL.asm
                                   (0014) ;
                                   (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                   (0016) ;  Edits to this file will not be preserved.
                                   (0017) ;==========================================================================
                                   (0018) ;
                                   (0019) include "m8c.inc"
                                   (0020) include "memory.inc"
                                   (0021) include "GlobalParams.inc"
                                   (0022) 
                                   (0023) export LoadConfigInit
                                   (0024) export _LoadConfigInit
                                   (0025) export LoadConfig_photoframe8pin
                                   (0026) export _LoadConfig_photoframe8pin
                                   (0027) 
                                   (0028) export NO_SHADOW
                                   (0029) export _NO_SHADOW
                                   (0030) 
                                   (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                   (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                   (0033) 
                                   (0034) AREA psoc_config(rom, rel)
                                   (0035) 
                                   (0036) ;---------------------------------------------------------------------------
                                   (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                   (0038) ;                  parameters handled by boot code, like CPU speed). This
                                   (0039) ;                  function can be called from user code, but typically it
                                   (0040) ;                  is only called from boot.
                                   (0041) ;
                                   (0042) ;       INPUTS: None.
                                   (0043) ;      RETURNS: Nothing.
                                   (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                   (0045) ;               In the large memory model currently only the page
                                   (0046) ;               pointer registers listed below are modified.  This does
                                   (0047) ;               not guarantee that in future implementations of this
                                   (0048) ;               function other page pointer registers will not be
                                   (0049) ;               modified.
                                   (0050) ;          
                                   (0051) ;               Page Pointer Registers Modified: 
                                   (0052) ;               CUR_PP
                                   (0053) ;
                                   (0054) _LoadConfigInit:
                                   (0055)  LoadConfigInit:
                                   (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0057)     
02A2: 01 F1    ADD   A,241         (0058) 	lcall	LoadConfigTBL_photoframe8pin_Ordered
02A4: 7C 02 A8 LCALL 0x02A8        (0059) 	lcall	LoadConfig_photoframe8pin
                                   (0060) 
                                   (0061) 
                                   (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
02A7: 7F       RET                 (0063)     ret
                                   (0064) 
                                   (0065) ;---------------------------------------------------------------------------
                                   (0066) ; Load Configuration photoframe8pin
                                   (0067) ;
                                   (0068) ;    Load configuration registers for photoframe8pin.
                                   (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0070) ;
                                   (0071) ;       INPUTS: None.
                                   (0072) ;      RETURNS: Nothing.
                                   (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0074) ;               modified as may the Page Pointer registers!
                                   (0075) ;               In the large memory model currently only the page
                                   (0076) ;               pointer registers listed below are modified.  This does
                                   (0077) ;               not guarantee that in future implementations of this
                                   (0078) ;               function other page pointer registers will not be
                                   (0079) ;               modified.
                                   (0080) ;          
                                   (0081) ;               Page Pointer Registers Modified: 
                                   (0082) ;               CUR_PP
                                   (0083) ;
                                   (0084) _LoadConfig_photoframe8pin:
                                   (0085)  LoadConfig_photoframe8pin:
                                   (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0087) 
02A8: 10       PUSH  X             (0088) 	push	x
02A9: 70 EF    AND   F,239         (0089)     M8C_SetBank0                    ; Force bank 0
02AB: 50 00    MOV   A,0           (0090)     mov     a, 0                    ; Specify bank 0
02AD: 67       ASR   A             (0091)     asr     a                       ; Store in carry flag
                                   (0092)                                     ; Load bank 0 table:
02AE: 50 02    MOV   A,2           (0093)     mov     A, >LoadConfigTBL_photoframe8pin_Bank0
02B0: 57 49    MOV   X,73          (0094)     mov     X, <LoadConfigTBL_photoframe8pin_Bank0
02B2: 7C 02 C3 LCALL 0x02C3        (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                   (0096) 
02B5: 50 01    MOV   A,1           (0097)     mov     a, 1                    ; Specify bank 1
02B7: 67       ASR   A             (0098)     asr     a                       ; Store in carry flag
                                   (0099)                                     ; Load bank 1 table:
02B8: 50 02    MOV   A,2           (0100)     mov     A, >LoadConfigTBL_photoframe8pin_Bank1
02BA: 57 72    MOV   X,114         (0101)     mov     X, <LoadConfigTBL_photoframe8pin_Bank1
02BC: 7C 02 C3 LCALL 0x02C3        (0102)     lcall   LoadConfig              ; Load the bank 1 values
                                   (0103) 
02BF: 70 EF    AND   F,239         (0104)     M8C_SetBank0                    ; Force return to bank 0
02C1: 20       POP   X             (0105) 	pop		x
                                   (0106) 
                                   (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
02C2: 7F       RET                 (0108)     ret
                                   (0109) 
                                   (0110) 
                                   (0111) 
                                   (0112) 
                                   (0113) ;---------------------------------------------------------------------------
                                   (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                   (0115) ;              pairs. Terminate on address=0xFF.
                                   (0116) ;
                                   (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                   (0118) ;           Flag Register Carry bit encodes the Register Bank
                                   (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                   (0120) ;
                                   (0121) ;  RETURNS: nothing.
                                   (0122) ;
                                   (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                   (0124) ;                X-3 Temporary store for register address
                                   (0125) ;                X-2 LSB of config table address
                                   (0126) ;                X-1 MSB of config table address
                                   (0127) ;
                                   (0128) LoadConfig:
                                   (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
02C3: 38 02    ADD   SP,2          (0130)     add     SP, 2                   ; Set up local vars
02C5: 10       PUSH  X             (0131)     push    X                       ; Save config table address on stack
02C6: 08       PUSH  A             (0132)     push    A
02C7: 4F       MOV   X,SP          (0133)     mov     X, SP
02C8: 56 FC 00 MOV   [X-4],0       (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
02CB: D0 04    JNC   0x02D0        (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
02CD: 56 FC 01 MOV   [X-4],1       (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                   (0137) .BankSelectSaved:
02D0: 18       POP   A             (0138)     pop     A
02D1: 20       POP   X             (0139)     pop     X
                                   (0140) 
                                   (0141) LoadConfigLp:
02D2: 70 EF    AND   F,239         (0142)     M8C_SetBank0                    ; Switch to bank 0
02D4: 62 E3 00 MOV   REG[227],0    (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
02D7: 10       PUSH  X             (0144)     push    X                       ; Preserve the config table address
02D8: 08       PUSH  A             (0145)     push    A
02D9: 28       ROMX                (0146)     romx                            ; Load register address from table
02DA: 39 FF    CMP   A,255         (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
02DC: A0 1F    JZ    0x02FC        (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
02DE: 4F       MOV   X,SP          (0149)     mov     X, SP                   ;
02DF: 48 FC 01 TST   [X-4],1       (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
02E2: A0 03    JZ    0x02E6        (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
02E4: 71 10    OR    F,16          (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                   (0153) .IOBankNowSet:
02E6: 54 FD    MOV   [X-3],A       (0154)     mov     [X-3], A                ; Stash the register address
02E8: 18       POP   A             (0155)     pop     A                       ; Retrieve the table address
02E9: 20       POP   X             (0156)     pop     X
02EA: 75       INC   X             (0157)     inc     X                       ; Advance to the data byte
02EB: 09 00    ADC   A,0           (0158)     adc     A, 0
02ED: 10       PUSH  X             (0159)     push    X                       ; Save the config table address again
02EE: 08       PUSH  A             (0160)     push    A
02EF: 28       ROMX                (0161)     romx                            ; load config data from the table
02F0: 4F       MOV   X,SP          (0162)     mov     X, SP                   ; retrieve the register address
02F1: 59 FD    MOV   X,[X-3]       (0163)     mov     X, [X-3]
02F3: 61 00    MOV   REG[X+0],A    (0164)     mov     reg[X], A               ; Configure the register
02F5: 18       POP   A             (0165)     pop     A                       ; retrieve the table address
02F6: 20       POP   X             (0166)     pop     X
02F7: 75       INC   X             (0167)     inc     X                       ; advance to next table entry
02F8: 09 00    ADC   A,0           (0168)     adc     A, 0
02FA: 8F D7    JMP   0x02D2        (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                   (0170) EndLoadConfig:
02FC: 38 FC    ADD   SP,252        (0171)     add     SP, -4
                                   (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
02FE: 7F       RET                 (0173)     ret

FILE: lib\uartint.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  FILENAME:   UARTINT.asm
                                   (0004) ;;  Version: 5.2, Updated on 2006/06/07 at 12:20:11
                                   (0005) ;;  Generated by PSoC Designer ver 4.3  b1884 : 23 June, 2006
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                   (0008) ;;-----------------------------------------------------------------------------
                                   (0009) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0010) ;;*****************************************************************************
                                   (0011) ;;*****************************************************************************
                                   (0012) 
                                   (0013) 
                                   (0014) include "UART.inc"
                                   (0015) include "memory.inc"
                                   (0016) include "m8c.inc"
                                   (0017) 
                                   (0018) ;-----------------------------------------------
                                   (0019) ;  Global Symbols
                                   (0020) ;-----------------------------------------------
                                   (0021) export  _UART_TX_ISR
                                   (0022) export  _UART_RX_ISR
                                   (0023) 
                                   (0024) IF (UART_RXBUF_ENABLE)
                                   (0025) export  UART_aRxBuffer
                                   (0026) export _UART_aRxBuffer
                                   (0027) export  UART_bRxCnt
                                   (0028) export _UART_bRxCnt
                                   (0029) export  UART_fStatus
                                   (0030) export _UART_fStatus
                                   (0031) ENDIF
                                   (0032) 
                                   (0033) 
                                   (0034) ;-----------------------------------------------
                                   (0035) ; Variable Allocation
                                   (0036) ;-----------------------------------------------
                                   (0037) AREA InterruptRAM (RAM, REL, CON)
                                   (0038) 
                                   (0039) IF (UART_RXBUF_ENABLE)
                                   (0040)  UART_fStatus:
                                   (0041) _UART_fStatus:      BLK  1
                                   (0042)  UART_bRxCnt:
                                   (0043) _UART_bRxCnt:       BLK  1
                                   (0044) AREA UART_RAM (RAM, REL, CON)
                                   (0045)  UART_aRxBuffer:
                                   (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                   (0047) ENDIF
                                   (0048) 
                                   (0049) AREA InterruptRAM (RAM, REL, CON)
                                   (0050) 
                                   (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                   (0052) ;---------------------------------------------------
                                   (0053) ; Insert your custom declarations below this banner
                                   (0054) ;---------------------------------------------------
                                   (0055) 
                                   (0056) ;------------------------
                                   (0057) ;  Includes
                                   (0058) ;------------------------
                                   (0059) 
                                   (0060) 
                                   (0061) ;------------------------
                                   (0062) ;  Constant Definitions
                                   (0063) ;------------------------
                                   (0064) 
                                   (0065) 
                                   (0066) ;------------------------
                                   (0067) ; Variable Allocation
                                   (0068) ;------------------------
                                   (0069) 
                                   (0070) 
                                   (0071) ;---------------------------------------------------
                                   (0072) ; Insert your custom declarations above this banner
                                   (0073) ;---------------------------------------------------
                                   (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0075) 
                                   (0076) 
                                   (0077) AREA UserModules (ROM, REL, CON)
                                   (0078) 
                                   (0079) ;-----------------------------------------------------------------------------
                                   (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                   (0081) ;
                                   (0082) ;  DESCRIPTION:
                                   (0083) ;     UART TX interrupt handler for instance UART.
                                   (0084) ;
                                   (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                   (0086) ;     handler for this function, then place code where specified.
                                   (0087) ;-----------------------------------------------------------------------------
                                   (0088) 
                                   (0089) _UART_TX_ISR:
                                   (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                   (0091)    ;---------------------------------------------------
                                   (0092)    ; Insert your custom code below this banner
                                   (0093)    ;---------------------------------------------------
                                   (0094)    ;   NOTE: interrupt service routines must preserve
                                   (0095)    ;   the values of the A and X CPU registers.
                                   (0096)    
                                   (0097)    ;---------------------------------------------------
                                   (0098)    ; Insert your custom code above this banner
                                   (0099)    ;---------------------------------------------------
                                   (0100)    ;@PSoC_UserCode_END@ (Do not change this line.)
02FF: 7E       RETI                (0101)    reti
                                   (0102) 
                                   (0103) 
                                   (0104) ;-----------------------------------------------------------------------------
                                   (0105) ;  FUNCTION NAME: _UART_RX_ISR
                                   (0106) ;
                                   (0107) ;  DESCRIPTION:
                                   (0108) ;     UART RX interrupt handler for instance UART.
                                   (0109) ;     This ISR handles the background processing of received characters if
                                   (0110) ;     the buffer is enabled.
                                   (0111) ;
                                   (0112) ;
                                   (0113) ;  The following assumes that the RX buffer feature has been enabled.
                                   (0114) ;
                                   (0115) ;  SIDE EFFECTS:
                                   (0116) ;     There are 3 posible errors that may occur with the serial port.
                                   (0117) ;      1) Parity Error
                                   (0118) ;      2) Framing Error
                                   (0119) ;      3) OverRun Error
                                   (0120) ;
                                   (0121) ;  This user module check for parity and framing error.  If either of these
                                   (0122) ;  two errors are detected, the data is read and ignored.  When an overRun
                                   (0123) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                   (0124) ;  this reason this error is ignored at this time.  Code could be added to
                                   (0125) ;  this ISR to set a flag if an error condition occurs.
                                   (0126) ;
                                   (0127) ;  THEORY of OPERATION:
                                   (0128) ;     When using the RX buffer feature, the ISR collects received characters
                                   (0129) ;     in a buffer until the user defined command terminator is detected.  After
                                   (0130) ;     the command terminator is detected, the command bit is set and all other
                                   (0131) ;     characters will be ignored until the command bit is reset.  Up to
                                   (0132) ;     buffer_size - 1 characters will be collected waiting for a command
                                   (0133) ;     terminator.  After that, the characters will be discarded, although
                                   (0134) ;     a command determinator will still cause the command bit to be set.
                                   (0135) ;
                                   (0136) ;-----------------------------------------------------------------------------
                                   (0137) _UART_RX_ISR:
                                   (0138) 
                                   (0139)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                   (0140)    ;---------------------------------------------------
                                   (0141)    ; Insert your custom code below this banner
                                   (0142)    ;---------------------------------------------------
                                   (0143)    ;   NOTE: interrupt service routines must preserve
                                   (0144)    ;   the values of the A and X CPU registers.
                                   (0145) 
                                   (0146)    ;---------------------------------------------------
                                   (0147)    ; Insert your custom code above this banner
                                   (0148)    ;---------------------------------------------------
                                   (0149)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0150) 
                                   (0151) IF (UART_RXBUF_ENABLE)
                                   (0152)    push A
                                   (0153)    push X
                                   (0154)    
                                   (0155)    IF SYSTEM_LARGE_MEMORY_MODEL
                                   (0156)       REG_PRESERVE IDX_PP
                                   (0157)    ENDIF
                                   (0158)    
                                   (0159)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                   (0160)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                   (0161)    push A                                                  ; Store copy for later test
                                   (0162)                                                            ; IF real RX interrupt
                                   (0163)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                   (0164)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                   (0165)    pop  A                                                  ; Restore stack
                                   (0166)    jmp  .RESTORE_IDX_PP
                                   (0167) 
                                   (0168) .UARTRX_ReadRx:
                                   (0169)    pop  A                                                  ; Restore status flags
                                   (0170)                                                            ; IF there is no error, get data
                                   (0171)                                                            ; Check for parity or framing error
                                   (0172)    and  A,UART_RX_ERROR
                                   (0173)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                   (0174) 
                                   (0175)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                   (0176)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer to clear it.
                                   (0177)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                   (0178)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                   (0179) 
                                   (0180)                                                            ; Disable and re-enable RX to reset after
                                   (0181)                                                            ; framing error.
                                   (0182)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                   (0183)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                   (0184)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                   (0185) 
                                   (0186) 
                                   (0187) .UARTRX_NO_ERROR:
                                   (0188)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                   (0189) 
                                   (0190)                                                            ; IF buffer not full
                                   (0191)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                   (0192)    jnz  .RESTORE_IDX_PP                                    ; All done
                                   (0193) 
                                   (0194)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                   (0195)    jnz  .UARTRX_CHK_BACKSPACE
                                   (0196)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                   (0197) 
                                   (0198) 
                                   (0199) 
                                   (0200)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                   (0201)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                   (0202)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                   (0203)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                   (0204)    jmp  .RESTORE_IDX_PP
                                   (0205) 
                                   (0206) .UARTRX_CHK_BACKSPACE:                                     ; 
                                   (0207) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                   (0208)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                   (0209)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                   (0210)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                   (0211)    jz   .RESTORE_IDX_PP                                    ; 
                                   (0212)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                   (0213)    jmp  .RESTORE_IDX_PP
                                   (0214) ENDIF                                                      ; 
                                   (0215) 
                                   (0216) .UARTRX_IGNORE:
                                   (0217) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                   (0218)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                   (0219)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                   (0220) ENDIF
                                   (0221) 
                                   (0222) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                   (0223) 	
                                   (0224)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                   (0225)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                   (0226)    jc   .UARTRX_ISR_GETDATA
                                   (0227)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                   (0228)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                   (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                   (0230)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                   (0231)    jmp  .RESTORE_IDX_PP
                                   (0232) 
                                   (0233) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                   (0234)                                                            ; X is already loaded with pointer
                                   (0235)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                   (0236)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                   (0237)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                   (0238)    inc  X                                                  ; Inc the pointer
                                   (0239)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                   (0240)                                                            ; ENDIF max string size
                                   (0241) .RESTORE_IDX_PP:
                                   (0242)    IF SYSTEM_LARGE_MEMORY_MODEL
                                   (0243)       REG_RESTORE IDX_PP
                                   (0244)    ENDIF
                                   (0245) 
                                   (0246) .END_UARTRX_ISR:
                                   (0247)    pop  X
                                   (0248)    pop  A
                                   (0249) 
                                   (0250) ENDIF
                                   (0251) 
                                   (0252) UART_RX_ISR_END:
0300: 7E       RETI                (0253)    reti

FILE: lib\uart.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  Filename:   UART.asm
                                   (0004) ;;  Version: 5.2, Updated on 2006/06/07 at 12:20:11
                                   (0005) ;;  Generated by PSoC Designer ver 4.3  b1884 : 23 June, 2006
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                   (0008) ;;                22/24/25/26/27xxx families.
                                   (0009) ;;
                                   (0010) ;;
                                   (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0013) ;;        This means it is the caller's responsibility to preserve any values
                                   (0014) ;;        in the X and A registers that are still needed after the API functions
                                   (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0019) ;;-----------------------------------------------------------------------------
                                   (0020) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0021) ;;*****************************************************************************
                                   (0022) ;;*****************************************************************************
                                   (0023) 
                                   (0024) 
                                   (0025) include "m8c.inc"
                                   (0026) include "memory.inc"
                                   (0027) include "UART.inc"
                                   (0028) 
                                   (0029) ;-----------------------------------------------
                                   (0030) ;  Global Symbols
                                   (0031) ;-----------------------------------------------
                                   (0032) ;-------------------------------------------------------------------
                                   (0033) ;  Declare the functions global for both assembler and C compiler.
                                   (0034) ;
                                   (0035) ;  Note that there are two names for each API. First name is
                                   (0036) ;  assembler reference. Name with underscore is name refence for
                                   (0037) ;  C compiler.  Calling function in C source code does not require
                                   (0038) ;  the underscore.
                                   (0039) ;-------------------------------------------------------------------
                                   (0040) export  UART_SetTxIntMode
                                   (0041) export _UART_SetTxIntMode
                                   (0042) export  UART_EnableInt
                                   (0043) export _UART_EnableInt
                                   (0044) export  UART_DisableInt
                                   (0045) export _UART_DisableInt
                                   (0046) 
                                   (0047) export  UART_Start
                                   (0048) export _UART_Start
                                   (0049) export  UART_Stop
                                   (0050) export _UART_Stop
                                   (0051) export  UART_SendData
                                   (0052) export _UART_SendData
                                   (0053) export  UART_bReadTxStatus
                                   (0054) export _UART_bReadTxStatus
                                   (0055) export  UART_bReadRxData
                                   (0056) export _UART_bReadRxData
                                   (0057) export  UART_bReadRxStatus
                                   (0058) export _UART_bReadRxStatus
                                   (0059) 
                                   (0060) export  UART_IntCntl
                                   (0061) export _UART_IntCntl
                                   (0062) 
                                   (0063) export  UART_TxIntMode
                                   (0064) export _UART_TxIntMode
                                   (0065) 
                                   (0066) export  UART_PutSHexByte
                                   (0067) export _UART_PutSHexByte
                                   (0068) export  UART_PutSHexInt
                                   (0069) export _UART_PutSHexInt
                                   (0070) 
                                   (0071) export  UART_CPutString
                                   (0072) export _UART_CPutString
                                   (0073) export  UART_PutString
                                   (0074) export _UART_PutString
                                   (0075) export  UART_PutChar
                                   (0076) export _UART_PutChar
                                   (0077) export  UART_Write
                                   (0078) export _UART_Write
                                   (0079) export  UART_CWrite
                                   (0080) export _UART_CWrite
                                   (0081) 
                                   (0082) export  UART_cGetChar
                                   (0083) export _UART_cGetChar
                                   (0084) export  UART_cReadChar
                                   (0085) export _UART_cReadChar
                                   (0086) export  UART_iReadChar
                                   (0087) export _UART_iReadChar
                                   (0088) export  UART_PutCRLF
                                   (0089) export _UART_PutCRLF
                                   (0090) 
                                   (0091) IF (UART_RXBUF_ENABLE)
                                   (0092) export  UART_CmdReset
                                   (0093) export _UART_CmdReset
                                   (0094) export  UART_bCmdCheck
                                   (0095) export _UART_bCmdCheck
                                   (0096) export  UART_bCmdLength
                                   (0097) export _UART_bCmdLength
                                   (0098) export  UART_bErrCheck
                                   (0099) export _UART_bErrCheck
                                   (0100) 
                                   (0101) export  UART_szGetParam
                                   (0102) export _UART_szGetParam
                                   (0103) export  UART_szGetRestOfParams
                                   (0104) export _UART_szGetRestOfParams
                                   (0105) ENDIF
                                   (0106) 
                                   (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0108) ; WARNING WARNING WARNING
                                   (0109) ; The following exports are for backwards compatibility only and should
                                   (0110) ; not be used for new designs. They may be eliminated in a future release.
                                   (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                   (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0113) export  bUART_ReadTxStatus
                                   (0114) export _bUART_ReadTxStatus
                                   (0115) export  bUART_ReadRxData
                                   (0116) export _bUART_ReadRxData
                                   (0117) export  bUART_ReadRxStatus
                                   (0118) export _bUART_ReadRxStatus
                                   (0119) 	
                                   (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0121) ;             END WARNING
                                   (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0123) 
                                   (0124) ;-----------------------------------------------
                                   (0125) ; Variable Allocation
                                   (0126) ;-----------------------------------------------
                                   (0127) IF (UART_RXBUF_ENABLE)
                                   (0128)     
                                   (0129) area UART_RAM (RAM, REL, CON)
                                   (0130)     
                                   (0131)  ptrParam:   BLK  1
                                   (0132) 
                                   (0133) ENDIF
                                   (0134) 
                                   (0135) area text (ROM,REL)
                                   (0136) 
                                   (0137) ;-----------------------------------------------
                                   (0138) ;  EQUATES
                                   (0139) ;-----------------------------------------------
                                   (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                   (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                   (0142) 
                                   (0143) area UserModules (ROM, REL, CON)
                                   (0144) 
                                   (0145) ;=============================================================================
                                   (0146) ;=============================================================================
                                   (0147) ;
                                   (0148) ;     Low-Level Commands
                                   (0149) ;
                                   (0150) ;=============================================================================
                                   (0151) ;=============================================================================
                                   (0152) 
                                   (0153) .SECTION
                                   (0154) ;-----------------------------------------------------------------------------
                                   (0155) ;  FUNCTION NAME: UART_EnableInt
                                   (0156) ;
                                   (0157) ;  DESCRIPTION:
                                   (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                   (0159) ;     bit associated with this User Module. Remember to call the global
                                   (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                   (0161) ;-----------------------------------------------------------------------------
                                   (0162) ;
                                   (0163) ;  ARGUMENTS:
                                   (0164) ;     none.
                                   (0165) ;
                                   (0166) ;  RETURNS:
                                   (0167) ;     none.
                                   (0168) ;
                                   (0169) ;  SIDE EFFECTS:
                                   (0170) ;    The A and X registers may be modified by this or future implementations
                                   (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0174) ;    functions.
                                   (0175) ;
                                   (0176)  UART_EnableInt:
                                   (0177) _UART_EnableInt:
                                   (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
0301: 43 E1 04 OR    REG[225],4    (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0304: 43 E1 08 OR    REG[225],8    (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                   (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0307: 7F       RET                 (0182)    ret
                                   (0183) .ENDSECTION
                                   (0184) 
                                   (0185)     
                                   (0186) .SECTION
                                   (0187) ;-----------------------------------------------------------------------------
                                   (0188) ;  FUNCTION NAME: UART_DisableInt
                                   (0189) ;
                                   (0190) ;  DESCRIPTION:
                                   (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                   (0192) ;     associated with this User Module.
                                   (0193) ;-----------------------------------------------------------------------------
                                   (0194) ;
                                   (0195) ;  ARGUMENTS:
                                   (0196) ;     none.
                                   (0197) ;
                                   (0198) ;  RETURNS:
                                   (0199) ;     none.
                                   (0200) ;
                                   (0201) ;  SIDE EFFECTS:
                                   (0202) ;    The A and X registers may be modified by this or future implementations
                                   (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0206) ;    functions.
                                   (0207) ;
                                   (0208)  UART_DisableInt:
                                   (0209) _UART_DisableInt:
                                   (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
0308: 41 E1 FB AND   REG[225],251  (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
030B: 41 E1 F7 AND   REG[225],247  (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                   (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
030E: 7F       RET                 (0214)    ret
                                   (0215) .ENDSECTION
                                   (0216) 
                                   (0217) 
                                   (0218) .SECTION
                                   (0219) ;-----------------------------------------------------------------------------
                                   (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                   (0221) ;
                                   (0222) ;  DESCRIPTION:
                                   (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0224) ;-----------------------------------------------------------------------------
                                   (0225) ;
                                   (0226) ;  ARGUMENTS:
                                   (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0228) ;        Passed in the A register
                                   (0229) ;
                                   (0230) ;  RETURNS:
                                   (0231) ;     none.
                                   (0232) ;
                                   (0233) ;  SIDE EFFECTS:
                                   (0234) ;    The A and X registers may be modified by this or future implementations
                                   (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0238) ;    functions.
                                   (0239) ;
                                   (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0242) ;     on TX register empty or TX transmit complete
                                   (0243) ;
                                   (0244)  UART_SetTxIntMode:
                                   (0245) _UART_SetTxIntMode:
                                   (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
030F: 71 10    OR    F,16          (0247)    M8C_SetBank1
0311: 21 01    AND   A,1           (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0313: A0 07    JZ    0x031B        (0249)    jz    .SetModeRegEmpty
0315: 43 28 10 OR    REG[40],16    (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0318: 70 EF    AND   F,239         (0251)    M8C_SetBank0
                                   (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
031A: 7F       RET                 (0253)    ret
                                   (0254) 
                                   (0255) .SetModeRegEmpty:
031B: 41 28 EF AND   REG[40],239   (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
031E: 70 EF    AND   F,239         (0257)    M8C_SetBank0
                                   (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0320: 7F       RET                 (0259)    ret
                                   (0260) .ENDSECTION
                                   (0261) 
                                   (0262) 
                                   (0263) .SECTION
                                   (0264) ;-----------------------------------------------------------------------------
                                   (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                   (0266) ;
                                   (0267) ;  DESCRIPTION:
                                   (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0269) ;-----------------------------------------------------------------------------
                                   (0270) ;
                                   (0271) ;  ARGUMENTS:
                                   (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                   (0273) ;        Passed in the A register.
                                   (0274) ;
                                   (0275) ;  RETURNS:
                                   (0276) ;     none.
                                   (0277) ;
                                   (0278) ;  SIDE EFFECTS:
                                   (0279) ;    The A and X registers may be modified by this or future implementations
                                   (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0283) ;    functions.
                                   (0284) ;
                                   (0285)  UART_Start:
                                   (0286) _UART_Start:
                                   (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                   (0289) 
0321: 29 01    OR    A,1           (0290)    or    A, bfCONTROL_REG_START_BIT
0323: 60 2B    MOV   REG[43],A     (0291)    mov   REG[UART_TX_CONTROL_REG], A
0325: 60 2F    MOV   REG[47],A     (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                   (0293) IF ( UART_RXBUF_ENABLE )
                                   (0294)    call  _UART_CmdReset
                                   (0295) ENDIF
                                   (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0327: 7F       RET                 (0297)    ret
                                   (0298) .ENDSECTION
                                   (0299) 
                                   (0300) 
                                   (0301) .SECTION
                                   (0302) ;-----------------------------------------------------------------------------
                                   (0303) ;  FUNCTION NAME: UART_Stop
                                   (0304) ;
                                   (0305) ;  DESCRIPTION:
                                   (0306) ;     Disables UART operation.
                                   (0307) ;-----------------------------------------------------------------------------
                                   (0308) ;
                                   (0309) ;  ARGUMENTS:
                                   (0310) ;     none.
                                   (0311) ;
                                   (0312) ;  RETURNS:
                                   (0313) ;     none.
                                   (0314) ;
                                   (0315) ;  SIDE EFFECTS:
                                   (0316) ;    The A and X registers may be modified by this or future implementations
                                   (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0320) ;    functions.
                                   (0321) ;
                                   (0322)  UART_Stop:
                                   (0323) _UART_Stop:
                                   (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0328: 41 2B FE AND   REG[43],254   (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
032B: 41 2F FE AND   REG[47],254   (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
032E: 7F       RET                 (0328)    ret
                                   (0329) .ENDSECTION
                                   (0330) 
                                   (0331) 
                                   (0332) .SECTION
                                   (0333) ;-----------------------------------------------------------------------------
                                   (0334) ;  FUNCTION NAME: UART_SendData
                                   (0335) ;
                                   (0336) ;  DESCRIPTION:
                                   (0337) ;     Initiates a transmission of data.
                                   (0338) ;-----------------------------------------------------------------------------
                                   (0339) ;
                                   (0340) ;  ARGUMENTS:
                                   (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                   (0342) ;
                                   (0343) ;  RETURNS:
                                   (0344) ;     none.
                                   (0345) ;
                                   (0346) ;  SIDE EFFECTS:
                                   (0347) ;    The A and X registers may be modified by this or future implementations
                                   (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0351) ;    functions.
                                   (0352) ;
                                   (0353)  UART_SendData:
                                   (0354) _UART_SendData:
                                   (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
032F: 60 29    MOV   REG[41],A     (0356)    mov REG[UART_TX_BUFFER_REG], A
                                   (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0331: 7F       RET                 (0358)    ret
                                   (0359) .ENDSECTION
                                   (0360) 
                                   (0361) 
                                   (0362) .SECTION
                                   (0363) ;-----------------------------------------------------------------------------
                                   (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                   (0365) ;
                                   (0366) ;  DESCRIPTION:
                                   (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                   (0368) ;-----------------------------------------------------------------------------
                                   (0369) ;
                                   (0370) ;  ARGUMENTS:
                                   (0371) ;     none.
                                   (0372) ;
                                   (0373) ;  RETURNS:
                                   (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                   (0375) ;           status bits (returned in A)
                                   (0376) ;
                                   (0377) ;  SIDE EFFECTS:
                                   (0378) ;    The A and X registers may be modified by this or future implementations
                                   (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0382) ;    functions.
                                   (0383) ;
                                   (0384)  UART_bReadTxStatus:
                                   (0385) _UART_bReadTxStatus:
                                   (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                   (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                   (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0332: 5D 2B    MOV   A,REG[43]     (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                   (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0334: 7F       RET                 (0391)    ret
                                   (0392) .ENDSECTION
                                   (0393) 
                                   (0394) 
                                   (0395) .SECTION
                                   (0396) ;-----------------------------------------------------------------------------
                                   (0397) ;  FUNCTION NAME: UART_bReadRxData
                                   (0398) ;
                                   (0399) ;  DESCRIPTION:
                                   (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                   (0401) ;     sure data is valid.
                                   (0402) ;-----------------------------------------------------------------------------
                                   (0403) ;
                                   (0404) ;  ARGUMENTS:
                                   (0405) ;     none.
                                   (0406) ;
                                   (0407) ;  RETURNS:
                                   (0408) ;     bRxData - returned in A.
                                   (0409) ;
                                   (0410) ;  SIDE EFFECTS:
                                   (0411) ;    The A and X registers may be modified by this or future implementations
                                   (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0415) ;    functions.
                                   (0416) ;
                                   (0417)  UART_bReadRxData:
                                   (0418) _UART_bReadRxData:
                                   (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                   (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                   (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0335: 5D 2E    MOV   A,REG[46]     (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                   (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0337: 7F       RET                 (0424)    ret
                                   (0425) .ENDSECTION
                                   (0426) 
                                   (0427) 
                                   (0428) .SECTION
                                   (0429) ;-----------------------------------------------------------------------------
                                   (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                   (0431) ;
                                   (0432) ;  DESCRIPTION:
                                   (0433) ;     Reads the RX Status bits in the Control/Status register.
                                   (0434) ;-----------------------------------------------------------------------------
                                   (0435) ;
                                   (0436) ;  ARGUMENTS:
                                   (0437) ;     none.
                                   (0438) ;
                                   (0439) ;  RETURNS:
                                   (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                   (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                   (0442) ;           returned in A.
                                   (0443) ;
                                   (0444) ;  SIDE EFFECTS:
                                   (0445) ;    The A and X registers may be modified by this or future implementations
                                   (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0449) ;    functions.
                                   (0450) ;
                                   (0451)  UART_bReadRxStatus:
                                   (0452) _UART_bReadRxStatus:
                                   (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                   (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                   (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0338: 5D 2F    MOV   A,REG[47]     (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                   (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
033A: 7F       RET                 (0458)    ret
                                   (0459) .ENDSECTION
                                   (0460) 
                                   (0461) 
                                   (0462) .SECTION
                                   (0463) ;-----------------------------------------------------------------------------
                                   (0464) ;  FUNCTION NAME: UART_TxIntMode
                                   (0465) ;
                                   (0466) ;  DESCRIPTION:
                                   (0467) ;     This function is used to change the TX Interrupt mode.
                                   (0468) ;-----------------------------------------------------------------------------
                                   (0469) ;
                                   (0470) ;  ARGUMENTS:
                                   (0471) ;     A => Tx Interrupt mode
                                   (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                   (0473) ;             1 => Interrupt on TX Complete
                                   (0474) ;
                                   (0475) ;  RETURNS:
                                   (0476) ;     none.
                                   (0477) ;
                                   (0478) ;  SIDE EFFECTS:
                                   (0479) ;    The A and X registers may be modified by this or future implementations
                                   (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0483) ;    functions.
                                   (0484) ;
                                   (0485)  UART_TxIntMode:
                                   (0486) _UART_TxIntMode:
                                   (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0488) 
033B: 21 01    AND   A,1           (0489)    and  A,UART_INT_MODE_TX_COMPLETE
033D: 71 10    OR    F,16          (0490)    M8C_SetBank1
033F: 39 01    CMP   A,1           (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
0341: A0 06    JZ    0x0348        (0492)    jz   .SetTxCmpMode
                                   (0493) 
0343: 41 28 EF AND   REG[40],239   (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0346: 80 04    JMP   0x034B        (0495)    jmp  .TxIntMode_End
                                   (0496) 
                                   (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0348: 43 28 10 OR    REG[40],16    (0498)    or   reg[UART_TX_FUNC_REG],0x10
                                   (0499) 
                                   (0500) .TxIntMode_End:
034B: 70 EF    AND   F,239         (0501)    M8C_SetBank0
                                   (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
034D: 7F       RET                 (0503)    ret
                                   (0504) .ENDSECTION
                                   (0505) 
                                   (0506)     
                                   (0507) .SECTION
                                   (0508) ;-----------------------------------------------------------------------------
                                   (0509) ;  FUNCTION NAME: UART_IntCntl
                                   (0510) ;
                                   (0511) ;  DESCRIPTION:
                                   (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                   (0513) ;-----------------------------------------------------------------------------
                                   (0514) ;
                                   (0515) ;  ARGUMENTS:
                                   (0516) ;     A => Interrupt mask
                                   (0517) ;
                                   (0518) ;  RETURNS:
                                   (0519) ;     none.
                                   (0520) ;
                                   (0521) ;  SIDE EFFECTS:
                                   (0522) ;    The A and X registers may be modified by this or future implementations
                                   (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0526) ;    functions.
                                   (0527) ;
                                   (0528) ;  THEORY of OPERATION or PROCEDURE:
                                   (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                   (0530) ;     and RX block.
                                   (0531) ;
                                   (0532)  UART_IntCntl:
                                   (0533) _UART_IntCntl:
                                   (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0535) 
034E: 08       PUSH  A             (0536)    push A
034F: 21 01    AND   A,1           (0537)    and  A,UART_ENABLE_RX_INT
0351: A0 06    JZ    0x0358        (0538)    jz   .DisRxInt
                                   (0539)      ; Enable Rx Interrupt
0353: 43 E1 08 OR    REG[225],8    (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0356: 80 04    JMP   0x035B        (0541)    jmp  .CheckTxInt
                                   (0542) .DisRxInt:
                                   (0543)      ; Disable Rx Interrupt
0358: 41 E1 F7 AND   REG[225],247  (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                   (0545) 
                                   (0546) .CheckTxInt:
035B: 18       POP   A             (0547)    pop  A
035C: 21 02    AND   A,2           (0548)    and  A,UART_ENABLE_TX_INT
035E: A0 06    JZ    0x0365        (0549)    jz   .DisTxInt
                                   (0550)      ; Enable Tx Interrupt
0360: 43 E1 04 OR    REG[225],4    (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0363: 80 04    JMP   0x0368        (0552)    jmp  .End_IntCntl
                                   (0553) .DisTxInt:
                                   (0554)      ; Disable Tx Interrupt
0365: 41 E1 FB AND   REG[225],251  (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                   (0556) 
                                   (0557) .End_IntCntl:
                                   (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0368: 7F       RET                 (0559)    ret
0369: 30       HALT  
036A: 31 32    XOR   A,50
036C: 33 34    XOR   A,[X+52]
036E: 35 36    XOR   [X+54],A
0370: 37 38 39 XOR   [X+56],57
0373: 41 42 43 AND   REG[66],67
0376: 44 45 46 OR    REG[X+69],70
                                   (0560) .ENDSECTION
                                   (0561) 
                                   (0562) 
                                   (0563) ;=============================================================================
                                   (0564) ;=============================================================================
                                   (0565) ;
                                   (0566) ;     High-Level Commands
                                   (0567) ;
                                   (0568) ;=============================================================================
                                   (0569) ;=============================================================================
                                   (0570) 
                                   (0571) 
                                   (0572) ;-----------------------------------------------------------------------------
                                   (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                   (0574) ;
                                   (0575) ;  DESCRIPTION:
                                   (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                   (0577) ;-----------------------------------------------------------------------------
                                   (0578) ;
                                   (0579) ;  ARGUMENTS:
                                   (0580) ;     A  => (BYTE) Data/char to be printed
                                   (0581) ;
                                   (0582) ;  RETURNS:
                                   (0583) ;     none.
                                   (0584) ;
                                   (0585) ;  SIDE EFFECTS:
                                   (0586) ;    The A and X registers may be modified by this or future implementations
                                   (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0590) ;    functions.
                                   (0591) ;
                                   (0592) .LITERAL
                                   (0593) UART_HEX_STR:
                                   (0594)      DS    "0123456789ABCDEF"
                                   (0595) .ENDLITERAL
                                   (0596) 
                                   (0597) .SECTION
                                   (0598)  UART_PutSHexByte:
                                   (0599) _UART_PutSHexByte:
                                   (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0379: 08       PUSH  A             (0601)    push  A                             ; Save lower nibble
037A: 67       ASR   A             (0602)    asr   A                             ; Shift high nibble to right
037B: 67       ASR   A             (0603)    asr   A
037C: 67       ASR   A             (0604)    asr   A
037D: 67       ASR   A             (0605)    asr   A
037E: 21 0F    AND   A,15          (0606)    and   A,0Fh                         ; Mask off nibble
0380: FF E7    INDEX 0x0369        (0607)    index UART_HEX_STR                  ; Get Hex value
0382: 90 0F    CALL  0x0393        (0608)    call  UART_PutChar                  ; Write data to screen
0384: 18       POP   A             (0609)    pop   A                             ; Restore value
0385: 21 0F    AND   A,15          (0610)    and   A,0Fh                         ; Mask off lower nibble
0387: FF E0    INDEX 0x0369        (0611)    index UART_HEX_STR                  ; Get Hex value
0389: 90 08    CALL  0x0393        (0612)    call  UART_PutChar                  ; Write data to screen
                                   (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
038B: 7F       RET                 (0614)    ret
                                   (0615) .ENDSECTION
                                   (0616) 
                                   (0617) 
                                   (0618) .SECTION
                                   (0619) ;-----------------------------------------------------------------------------
                                   (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                   (0621) ;
                                   (0622) ;  DESCRIPTION:
                                   (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0624) ;-----------------------------------------------------------------------------
                                   (0625) ;
                                   (0626) ;  ARGUMENTS:
                                   (0627) ;     Pointer to string
                                   (0628) ;     A  => ASB of Int
                                   (0629) ;     X  => MSB of Int
                                   (0630) ;
                                   (0631) ;  RETURNS:
                                   (0632) ;     none.
                                   (0633) ;
                                   (0634) ;  SIDE EFFECTS:
                                   (0635) ;    The A and X registers may be modified by this or future implementations
                                   (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0639) ;    functions.
                                   (0640) ;
                                   (0641) 
                                   (0642)  UART_PutSHexInt:
                                   (0643) _UART_PutSHexInt:
                                   (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
038C: 4B       SWAP  A,X           (0645)    swap  A,X
038D: 9F EA    CALL  0x0379        (0646)    call  UART_PutSHexByte              ; Print MSB
038F: 5B       MOV   A,X           (0647)    mov   A,X                           ; Move LSB into position
0390: 9F E7    CALL  0x0379        (0648)    call  UART_PutSHexByte              ; Print LSB
                                   (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0392: 7F       RET                 (0650)    ret
0393: 49 2B 10 TST   REG[43],16
                                   (0651) .ENDSECTION
                                   (0652) 
                                   (0653) 
                                   (0654) .SECTION
                                   (0655) ;-----------------------------------------------------------------------------
                                   (0656) ;  FUNCTION NAME: UART_PutChar
                                   (0657) ;
                                   (0658) ;  DESCRIPTION:
                                   (0659) ;     Send character out through UART TX port.
                                   (0660) ;-----------------------------------------------------------------------------
                                   (0661) ;
                                   (0662) ;  ARGUMENTS:
                                   (0663) ;     A has Character to send to UART Tx Port
                                   (0664) ;
                                   (0665) ;  RETURNS:
                                   (0666) ;     none
                                   (0667) ;
                                   (0668) ;  SIDE EFFECTS:
                                   (0669) ;    The A and X registers may be modified by this or future implementations
                                   (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0673) ;    functions.
                                   (0674) ;
                                   (0675) 
                                   (0676)    macro InLinePutChar( Source )
                                   (0677) .BufEmptyWaitLoop:
                                   (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                   (0679)    jz  .BufEmptyWaitLoop
                                   (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                   (0681)    endm
                                   (0682) 
                                   (0683)  UART_PutChar:
                                   (0684) _UART_PutChar:
                                   (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
0396: AF FC    JZ    0x0393        (0686)    InLinePutChar A
0398: 60 29    MOV   REG[41],A
                                   (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
039A: 7F       RET                 (0688)    ret
                                   (0689) .ENDSECTION
                                   (0690) 
                                   (0691) 
                                   (0692) .SECTION
                                   (0693) ;-----------------------------------------------------------------------------
                                   (0694) ;  FUNCTION NAME: UART_cGetChar
                                   (0695) ;
                                   (0696) ;  DESCRIPTION:
                                   (0697) ;     Read character from UART RX port.
                                   (0698) ;-----------------------------------------------------------------------------
                                   (0699) ;
                                   (0700) ;  ARGUMENTS:
                                   (0701) ;      none
                                   (0702) ;
                                   (0703) ;  RETURNS:
                                   (0704) ;     char that is returned from UART
                                   (0705) ;
                                   (0706) ;  SIDE EFFECTS:
                                   (0707) ;    The A and X registers may be modified by this or future implementations
                                   (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0711) ;    functions.
                                   (0712) ;
                                   (0713) ;    Program flow will stay in this function until a character is received.
                                   (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                   (0715) ;    the delay between characters is less than the watchdog timeout.
                                   (0716) ;
                                   (0717)  UART_cGetChar:
                                   (0718) _UART_cGetChar:
                                   (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
039B: 49 2F 08 TST   REG[47],8     (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
039E: AF FC    JZ    0x039B        (0721)    jz  UART_cGetChar                             ; If not loop
03A0: 5D 2E    MOV   A,REG[46]     (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                   (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
03A2: 7F       RET                 (0724)    ret
                                   (0725) .ENDSECTION
                                   (0726) 
                                   (0727) 
                                   (0728) .SECTION
                                   (0729) ;-----------------------------------------------------------------------------
                                   (0730) ;  FUNCTION NAME: UART_cReadChar
                                   (0731) ;
                                   (0732) ;  DESCRIPTION:
                                   (0733) ;     Read character from UART RX port.
                                   (0734) ;-----------------------------------------------------------------------------
                                   (0735) ;
                                   (0736) ;  ARGUMENTS:
                                   (0737) ;      none
                                   (0738) ;
                                   (0739) ;  RETURNS:
                                   (0740) ;     char that is returned from UART
                                   (0741) ;
                                   (0742) ;  SIDE EFFECTS:
                                   (0743) ;    The A and X registers may be modified by this or future implementations
                                   (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0747) ;    functions.
                                   (0748) ;
                                   (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                   (0750) ;    implies a valid character or an error condition occured.
                                   (0751) ;
                                   (0752)  UART_cReadChar:
                                   (0753) _UART_cReadChar:
                                   (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
03A3: 5D 2F    MOV   A,REG[47]     (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
03A5: 08       PUSH  A             (0756)    push A
03A6: 21 08    AND   A,8           (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
03A8: B0 04    JNZ   0x03AD        (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
03AA: 18       POP   A             (0759)    pop  A
03AB: 80 0B    JMP   0x03B7        (0760)    jmp  .RX_NO_VALID_CHAR
                                   (0761) 
                                   (0762) .RX_DATA_RDY:
03AD: 5D 2E    MOV   A,REG[46]     (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
03AF: 4B       SWAP  A,X           (0764)    swap A,X                                                ; determine if data is valid
                                   (0765) 
03B0: 18       POP   A             (0766)    pop  A                                                  ; Check for errors
03B1: 21 A0    AND   A,160         (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
03B3: B0 03    JNZ   0x03B7        (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
03B5: 4B       SWAP  A,X           (0769)    swap A,X                                                ; Put data in A and exit
                                   (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
03B6: 7F       RET                 (0771)    ret
                                   (0772) 
                                   (0773) .RX_NO_VALID_CHAR:
03B7: 50 00    MOV   A,0           (0774)    mov A,0x00                                              ; Zero out character
                                   (0775) 
                                   (0776)  End_UART_cReadChar:
                                   (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
03B9: 7F       RET                 (0778)    ret
                                   (0779) .ENDSECTION
                                   (0780) 
                                   (0781) 
                                   (0782) .SECTION
                                   (0783) ;-----------------------------------------------------------------------------
                                   (0784) ;  FUNCTION NAME: UART_iReadChar
                                   (0785) ;
                                   (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                   (0787) ;  to just set a value in the upper byte if error conditions exists.
                                   (0788) ;
                                   (0789) ;  DESCRIPTION:
                                   (0790) ;     Read character from UART RX port.
                                   (0791) ;-----------------------------------------------------------------------------
                                   (0792) ;
                                   (0793) ;  ARGUMENTS:
                                   (0794) ;      none
                                   (0795) ;
                                   (0796) ;  RETURNS:
                                   (0797) ;     An integer value is returned.  A negative value inplies and error
                                   (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                   (0799) ;
                                   (0800) ;     Error Codes:
                                   (0801) ;        0x80CC    Parity Error
                                   (0802) ;        0x40CC    Overrun Error
                                   (0803) ;        0x20CC    Framing Error
                                   (0804) ;        0x01CC    No Data available
                                   (0805) ;
                                   (0806) ;  SIDE EFFECTS:
                                   (0807) ;    The A and X registers may be modified by this or future implementations
                                   (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0811) ;    functions.
                                   (0812) ;
                                   (0813)  UART_iReadChar:
                                   (0814) _UART_iReadChar:
                                   (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
03BA: 5D 2F    MOV   A,REG[47]     (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                   (0817)                                                            ; Mask only errors and data ready
03BC: 21 E8    AND   A,232         (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
03BE: 08       PUSH  A             (0819)    push A
03BF: 21 08    AND   A,8           (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
03C1: B0 07    JNZ   0x03C9        (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
03C3: 18       POP   A             (0822)    pop  A
03C4: 29 01    OR    A,1           (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
03C6: 4B       SWAP  A,X           (0824)    swap A,X
03C7: 80 07    JMP   0x03CF        (0825)    jmp  End_UART_iReadChar
                                   (0826) 
                                   (0827) .RX_GET_DATA:
03C9: 18       POP   A             (0828)    pop  A
03CA: 21 E0    AND   A,224         (0829)    and  A,UART_RX_ERROR
03CC: 4B       SWAP  A,X           (0830)    swap A,X
03CD: 5D 2E    MOV   A,REG[46]     (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                   (0832)                                                            ; determine if data is valid
                                   (0833) 
                                   (0834)  End_UART_iReadChar:
                                   (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
03CF: 7F       RET                 (0836)    ret
                                   (0837) .ENDSECTION
                                   (0838) 
                                   (0839) 
                                   (0840) .SECTION
                                   (0841) ;-----------------------------------------------------------------------------
                                   (0842) ;  FUNCTION NAME: UART_PutString
                                   (0843) ;
                                   (0844) ;  DESCRIPTION:
                                   (0845) ;     Send String out through UART TX port.
                                   (0846) ;-----------------------------------------------------------------------------
                                   (0847) ;
                                   (0848) ;  ARGUMENTS:
                                   (0849) ;     Pointer to String
                                   (0850) ;     A has MSB of string address
                                   (0851) ;     X has LSB of string address
                                   (0852) ;
                                   (0853) ;  RETURNS:
                                   (0854) ;     none
                                   (0855) ;
                                   (0856) ;  SIDE EFFECTS:
                                   (0857) ;    The A and X registers may be modified by this or future implementations
                                   (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0861) ;    functions.
                                   (0862) ;          
                                   (0863) ;    Currently only the page pointer registers listed below are modified: 
                                   (0864) ;          IDX_PP
                                   (0865) ;
                                   (0866)  UART_PutString:
                                   (0867) _UART_PutString:
                                   (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0869)    RAM_SETPAGE_IDX A
                                   (0870) .PutStringLoop:
03D0: 52 00    MOV   A,[X+0]       (0871)    mov   A,[X]                                   ; Get value pointed to by X
03D2: A0 06    JZ    0x03D9        (0872)    jz    End_PutString                           ; Check for end of string
03D4: 9F BD    CALL  0x0393        (0873)    call  UART_PutChar                            ; Send character to Tx port
03D6: 75       INC   X             (0874)    inc   X                                       ; Advance pointer to next character
03D7: 8F F8    JMP   0x03D0        (0875)    jmp   .PutStringLoop                          ; Get next character
                                   (0876) 
                                   (0877) End_PutString:
                                   (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
03D9: 7F       RET                 (0879)    ret
                                   (0880) .ENDSECTION
                                   (0881)     
                                   (0882) .SECTION
                                   (0883) ;-----------------------------------------------------------------------------
                                   (0884) ;  FUNCTION NAME: UART_Write
                                   (0885) ;
                                   (0886) ;  DESCRIPTION:
                                   (0887) ;     Send String of length X to serial port
                                   (0888) ;-----------------------------------------------------------------------------
                                   (0889) ;
                                   (0890) ;  ARGUMENTS:
                                   (0891) ;     Pointer to String
                                   (0892) ;     [SP-5] Count of characters to send
                                   (0893) ;     [SP-4] has MSB of string address
                                   (0894) ;     [SP-3] has LSB of string address
                                   (0895) ;
                                   (0896) ;  RETURNS:
                                   (0897) ;     none
                                   (0898) ;
                                   (0899) ;  SIDE EFFECTS:
                                   (0900) ;    The A and X registers may be modified by this or future implementations
                                   (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0904) ;    functions.
                                   (0905) ;          
                                   (0906) ;    Currently only the page pointer registers listed below are modified: 
                                   (0907) ;          IDX_PP
                                   (0908) ;
                                   (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                   (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                   (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                   (0912) 
                                   (0913)  UART_Write:
                                   (0914) _UART_Write:
                                   (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
03DA: 4F       MOV   X,SP          (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                   (0918) 
                                   (0919) .NextByteLoop:
03DB: 52 FB    MOV   A,[X-5]       (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
03DD: A0 13    JZ    0x03F1        (0921)    jz    .End_Write                              ;   Yes, prepare to exit
03DF: 7B FB    DEC   [X-5]         (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                   (0923) 
                                   (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
                                   (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                   (0926)    ENDIF
                                   (0927) 
03E1: 59 FD    MOV   X,[X-3]       (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                   (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
03E3: 52 00    MOV   A,[X+0]       (0930)    mov   A, [X]                                  ; Grab the data
03E5: 49 2B 10 TST   REG[43],16
03E8: AF FC    JZ    0x03E5        (0931)    InlinePutChar A                               ; Put data in empty TX buf reg
03EA: 60 29    MOV   REG[41],A
03EC: 4F       MOV   X,SP          (0932)    mov   X, SP                                   ; Recover frame pointer
                                   (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
03ED: 77 FD    INC   [X-3]         (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
03EF: 8F EB    JMP   0x03DB        (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                   (0936) 
                                   (0937) .End_Write:
                                   (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
03F1: 7F       RET                 (0939)    ret
                                   (0940) .ENDSECTION
                                   (0941)     
                                   (0942) 
                                   (0943) .SECTION
                                   (0944) ;-----------------------------------------------------------------------------
                                   (0945) ;  FUNCTION NAME: UART_CWrite
                                   (0946) ;
                                   (0947) ;             WARNING WARNING NOT COMPLETE
                                   (0948) ;
                                   (0949) ;  DESCRIPTION:
                                   (0950) ;     Send String of length X to serial port
                                   (0951) ;-----------------------------------------------------------------------------
                                   (0952) ;
                                   (0953) ;  ARGUMENTS:
                                   (0954) ;     [SP-4] MSB of Count of character to send
                                   (0955) ;     [SP-3] LSB of Count of character to send
                                   (0956) ;     [SP-2] has MSB of string address
                                   (0957) ;     [SP-1] has LSB of string address
                                   (0958) ;
                                   (0959) ;  RETURNS:
                                   (0960) ;     none
                                   (0961) ;
                                   (0962) ;  SIDE EFFECTS:
                                   (0963) ;    The A and X registers may be modified by this or future implementations
                                   (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0967) ;    functions.
                                   (0968) ;
                                   (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                   (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                   (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                   (0973) 
                                   (0974)  UART_CWrite:
                                   (0975) _UART_CWrite:
                                   (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
03F2: 4F       MOV   X,SP          (0977)    mov   X,SP
                                   (0978) .CW_Loop:
03F3: 3D FA 00 CMP   [X-6],0       (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
03F6: B0 06    JNZ   0x03FD        (0980)    jnz   .CW_WRITEIT
03F8: 3D FB 00 CMP   [X-5],0       (0981)    cmp   [X+CLEN_LSB],0x00
03FB: A0 1D    JZ    0x0419        (0982)    jz    .End_CWrite                        ; Leave if done
                                   (0983) 
                                   (0984) .CW_WRITEIT:                                
03FD: 10       PUSH  X             (0985)    push  X                                  ; Save frame pointer
03FE: 52 FC    MOV   A,[X-4]       (0986)    mov   A,[X+CSTR_MSB]
0400: 59 FD    MOV   X,[X-3]       (0987)    mov   X,[X+CSTR_LSB]
0402: 28       ROMX                (0988)    romx                                     ; Get character from ROM
0403: 49 2B 10 TST   REG[43],16
0406: AF FC    JZ    0x0403        (0989)    InlinePutChar A                          ; Put data in empty TX buf reg
0408: 60 29    MOV   REG[41],A
040A: 20       POP   X             (0990)    pop   X                                  ; Restore frame pointer
040B: 07 FD 01 ADD   [X-3],1       (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
040E: 0F FC 00 ADC   [X-4],0       (0992)    adc   [X+CSTR_MSB],0
0411: 17 FB 01 SUB   [X-5],1       (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0414: 1F FA 00 SBB   [X-6],0       (0994)    sbb   [X+CLEN_MSB],0x00
0417: 8F DB    JMP   0x03F3        (0995)    jmp   .CW_Loop
                                   (0996) 
                                   (0997) .End_CWrite:
                                   (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0419: 7F       RET                 (0999)    ret
                                   (1000) .ENDSECTION
                                   (1001) 
                                   (1002) 
                                   (1003) .SECTION
                                   (1004) ;-----------------------------------------------------------------------------
                                   (1005) ;  FUNCTION NAME: UART_CPutString
                                   (1006) ;
                                   (1007) ;  DESCRIPTION:
                                   (1008) ;     Send String out through UART TX port.
                                   (1009) ;-----------------------------------------------------------------------------
                                   (1010) ;
                                   (1011) ;  ARGUMENTS:
                                   (1012) ;     Pointer to String
                                   (1013) ;     A has MSB of string address
                                   (1014) ;     X has LSB of string address
                                   (1015) ;
                                   (1016) ;  RETURNS:
                                   (1017) ;     none
                                   (1018) ;
                                   (1019) ;  SIDE EFFECTS:
                                   (1020) ;    The A and X registers may be modified by this or future implementations
                                   (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1024) ;    functions.
                                   (1025) ;
                                   (1026)  UART_CPutString:
                                   (1027) _UART_CPutString:
                                   (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
041A: 08       PUSH  A             (1029)    push  A                                       ; Store ROM pointer
041B: 10       PUSH  X             (1030)    push  X
041C: 28       ROMX                (1031)    romx                                          ; Get character from ROM
041D: A0 0B    JZ    0x0429        (1032)    jz    .End_CPutString
041F: 9F 72    CALL  0x0393        (1033)    call  UART_PutChar                            ; Print character
0421: 20       POP   X             (1034)    pop   X
0422: 18       POP   A             (1035)    pop   A
0423: 75       INC   X             (1036)    inc   X                                       ; Inc LSB of pointer
0424: DF F5    JNC   0x041A        (1037)    jnc   UART_CPutString                         ; Check for carry
0426: 74       INC   A             (1038)    inc   A                                       ; Inc MSB of pointer
0427: 8F F2    JMP   0x041A        (1039)    jmp   UART_CPutString
                                   (1040) 
                                   (1041) 
                                   (1042) .End_CPutString:
0429: 38 FE    ADD   SP,254        (1043)    add   SP, -2
                                   (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
042B: 7F       RET                 (1045)    ret
                                   (1046) .ENDSECTION
                                   (1047) 
                                   (1048) 
                                   (1049) .SECTION
                                   (1050) ;-----------------------------------------------------------------------------
                                   (1051) ;  FUNCTION NAME: UART_PutCRLF
                                   (1052) ;
                                   (1053) ;  DESCRIPTION:
                                   (1054) ;     Send a CR and LF
                                   (1055) ;-----------------------------------------------------------------------------
                                   (1056) ;
                                   (1057) ;  ARGUMENTS:
                                   (1058) ;     none.
                                   (1059) ;
                                   (1060) ;  RETURNS:
                                   (1061) ;     none.
                                   (1062) ;
                                   (1063) ;  SIDE EFFECTS:
                                   (1064) ;    The A and X registers may be modified by this or future implementations
                                   (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1068) ;    functions.
                                   (1069) ;
                                   (1070)  UART_PutCRLF:
                                   (1071) _UART_PutCRLF:
                                   (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
042C: 50 0D    MOV   A,13          (1073)    mov  A,0x0D                        ; Send CR
042E: 9F 63    CALL  0x0393        (1074)    call UART_PutChar
0430: 50 0A    MOV   A,10          (1075)    mov  A,0x0A                        ; Send LF
0432: 9F 5F    CALL  0x0393        (1076)    call UART_PutChar
                                   (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0434: 7F       RET                 (1078)    ret

FILE: .\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) #define CR				0x0D
(0009) #define ACK				6
(0010) #define VC3_Interrupt	0x80
(0011) 
(0012) typedef unsigned char bool;
(0013) typedef unsigned char byte;
(0014) typedef unsigned int word;
(0015) 
(0016) const byte SignOn[] = {"PhotoFrame V0.3"};
(0017) const byte NoDrive[] = {"No Flash Drive"};
(0018) const byte NoFiles[] = {"No .IMG files "};
(0019) const byte SetBaudRate[] = {"SBD \30\0\0\r"}; // 30 octal = 24 decimal = 125000 baud
(0020) const byte FileCommand[] = {"DIR 000.img\r"};
(0021) const byte MP3[] = {"DIR \0\0\0.mp3\r"};
(0022) byte InBuffer[32];
(0023) byte OutBuffer[32];
(0024) byte Index, Delay, CurrentUART;
(0025) word PreScalar;
(0026) long FileSize;
(0027) 
(0028) #pragma interrupt_handler OneMillisecond_ISR
(0029) void OneMillisecond_ISR (void) {
__text_start:
_OneMillisecond_ISR:
0435: 08       PUSH  A
0436: 51 09    MOV   A,[__r0]
0438: 08       PUSH  A
0439: 51 08    MOV   A,[__r1]
043B: 08       PUSH  A
(0030) // This is clocked by VC3.  VCx values produce an 8KHz VC3 interrupt
(0031) 	if (++PreScalar > 8000) {
043C: 51 0F    MOV   A,[PreScalar+1]
043E: 01 01    ADD   A,1
0440: 53 08    MOV   [__r1],A
0442: 51 0E    MOV   A,[PreScalar]
0444: 09 00    ADC   A,0
0446: 53 09    MOV   [__r0],A
0448: 5F 0F 08 MOV   [PreScalar+1],[__r1]
044B: 53 0E    MOV   [PreScalar],A
044D: 50 40    MOV   A,64
044F: 12 08    SUB   A,[__r1]
0451: 50 1F    MOV   A,31
0453: 1A 09    SBB   A,[__r0]
0455: D0 0E    JNC   0x0464
(0032) 		PreScalar = 1;
0457: 55 0F 01 MOV   [PreScalar+1],1
045A: 55 0E 00 MOV   [PreScalar],0
(0033) 		if (Delay) Delay--;
045D: 3C 11 00 CMP   [Delay],0
0460: A0 03    JZ    0x0464
0462: 7A 11    DEC   [Delay]
(0034) 		}
(0035) 	}
0464: 18       POP   A
0465: 53 08    MOV   [__r1],A
0467: 18       POP   A
0468: 53 09    MOV   [__r0],A
046A: 18       POP   A
046B: 7E       RETI  
(0036) 
(0037) void Wait(byte Seconds) {
_Wait:
  Seconds              --> X-4
046C: 10       PUSH  X
046D: 4F       MOV   X,SP
(0038) 	PreScalar = 1;
046E: 55 0F 01 MOV   [PreScalar+1],1
0471: 55 0E 00 MOV   [PreScalar],0
(0039) 	Delay = Seconds;
0474: 52 FC    MOV   A,[X-4]
0476: 53 11    MOV   [Delay],A
(0040) 	while (Delay) {
0478: 3C 11 00 CMP   [Delay],0
047B: BF FC    JNZ   0x0478
(0041) // Wait, Delay is decremented in ISR
(0042) 		}
(0043) 	}
047D: 20       POP   X
047E: 7F       RET   
(0044) 
(0045) void SwitchUART(byte Index) {
_SwitchUART:
  Index                --> X-4
047F: 10       PUSH  X
0480: 4F       MOV   X,SP
(0046) // Index = 0, switch to Vinculum; Index != 0, switch to Display
(0047) 	if (Index == CurrentUART) return;
0481: 52 FC    MOV   A,[X-4]
0483: 3A 10    CMP   A,[CurrentUART]
0485: B0 03    JNZ   0x0489
0487: 80 40    JMP   0x04C8
(0048) 	UART_Stop();
0489: 10       PUSH  X
048A: 7C 03 28 LCALL 0x0328
048D: 20       POP   X
(0049) 	if (Index) {
048E: 3D FC 00 CMP   [X-4],0
0491: A0 17    JZ    0x04A9
(0050) 		RDI0LT1 |= 0xf0;		// Set V_TX high
0493: 43 B4 F0 OR    REG[180],240
(0051) 		DCB03IN &= 0xef;		// RX input = D_RX
0496: 71 10    OR    F,16
0498: 41 2D EF AND   REG[45],239
049B: 70 EF    AND   F,239
(0052) 		DCB02OU &= 0xfe;		// TX drives D_TX
049D: 71 10    OR    F,16
049F: 41 2A FE AND   REG[42],254
04A2: 70 EF    AND   F,239
(0053) 		RDI0LT1 &= 0xf3;		// D_TX drives IO
04A4: 41 B4 F3 AND   REG[180],243
(0054) 		}
04A7: 80 15    JMP   0x04BD
(0055) 	else {
(0056) 		RDI0LT1 |= 0x0f;		// Set D_TX high
04A9: 43 B4 0F OR    REG[180],15
(0057) 		DCB03IN |= 0x10;		// RX input = V_RX
04AC: 71 10    OR    F,16
04AE: 43 2D 10 OR    REG[45],16
04B1: 70 EF    AND   F,239
(0058) 		DCB02OU |= 0x01;		// TX drives V_TX
04B3: 71 10    OR    F,16
04B5: 43 2A 01 OR    REG[42],1
04B8: 70 EF    AND   F,239
(0059) 		RDI0LT1 &= 0x3f;		// V_TX drives IO
04BA: 41 B4 3F AND   REG[180],63
(0060) 		}
(0061) 	CurrentUART = Index;
04BD: 52 FC    MOV   A,[X-4]
04BF: 53 10    MOV   [CurrentUART],A
(0062) 	UART_Start(UART_PARITY_NONE);
04C1: 10       PUSH  X
04C2: 50 00    MOV   A,0
04C4: 7C 03 21 LCALL 0x0321
04C7: 20       POP   X
(0063) 	}
04C8: 20       POP   X
04C9: 7F       RET   
(0064) 	
(0065) void WriteVinculum(byte Length) {
_WriteVinculum:
  Index                --> X+0
  Length               --> X-4
04CA: 10       PUSH  X
04CB: 4F       MOV   X,SP
04CC: 38 01    ADD   SP,1
(0066) 	byte Index;
(0067) // Setup interconnect to access Vinculum
(0068) 	SwitchUART(0);
04CE: 50 00    MOV   A,0
04D0: 08       PUSH  A
04D1: 9F AC    CALL  _SwitchUART
04D3: 38 FF    ADD   SP,255
(0069) 	Index = 0;
04D5: 56 00 00 MOV   [X+0],0
(0070) // Allow for RD command, only 2 letters
(0071) 	if (OutBuffer[0] == 0) Index = 1;
04D8: 3C 13 00 CMP   [OutBuffer],0
04DB: B0 2A    JNZ   0x0506
04DD: 56 00 01 MOV   [X+0],1
04E0: 80 25    JMP   0x0506
(0072) 	while (Length--) {
(0073) 		UART_PutChar(OutBuffer[Index++]);
04E2: 52 00    MOV   A,[X+0]
04E4: 53 08    MOV   [__r1],A
04E6: 55 09 00 MOV   [__r0],0
04E9: 01 01    ADD   A,1
04EB: 54 00    MOV   [X+0],A
04ED: 06 08 13 ADD   [__r1],19
04F0: 0E 09 00 ADC   [__r0],0
04F3: 3E 08    MVI   A,[__r1]
04F5: 10       PUSH  X
04F6: 7C 03 93 LCALL 0x0393
04F9: 20       POP   X
(0074) // Wait for character to be sent
(0075) 		while (!(UART_bReadTxStatus() & UART_TX_COMPLETE)) { /* Wait */ }
04FA: 10       PUSH  X
04FB: 7C 03 32 LCALL 0x0332
04FE: 20       POP   X
04FF: 53 09    MOV   [__r0],A
0501: 47 09 20 TST   [__r0],32
0504: AF F5    JZ    0x04FA
0506: 52 FC    MOV   A,[X-4]
0508: 53 08    MOV   [__r1],A
050A: 55 09 00 MOV   [__r0],0
050D: 11 01    SUB   A,1
050F: 54 FC    MOV   [X-4],A
0511: 3C 09 00 CMP   [__r0],0
0514: BF CD    JNZ   0x04E2
0516: 3C 08 00 CMP   [__r1],0
0519: BF C8    JNZ   0x04E2
(0076) 		}
(0077) 	}
051B: 38 FF    ADD   SP,255
051D: 20       POP   X
051E: 7F       RET   
(0078) 
(0079) void ReadVinculum(void) {
_ReadVinculum:
  Index                --> X+1
  InputChar            --> X+0
051F: 10       PUSH  X
0520: 4F       MOV   X,SP
0521: 38 02    ADD   SP,2
(0080) 	byte Index;
(0081) 	char InputChar;
(0082) // Setup interconnect to access Vinculum
(0083) 	SwitchUART(0);
0523: 50 00    MOV   A,0
0525: 08       PUSH  A
0526: 9F 57    CALL  _SwitchUART
0528: 38 FF    ADD   SP,255
(0084) // Collect characters until CR, skip first character if CR
(0085) 	Index = 0;
052A: 56 01 00 MOV   [X+1],0
(0086) // But don't wait more than a second
(0087) 	PreScalar = 0;
052D: 55 0F 00 MOV   [PreScalar+1],0
0530: 55 0E 00 MOV   [PreScalar],0
(0088) 	Delay = 1;
0533: 55 11 01 MOV   [Delay],1
(0089) 	InputChar = UART_cGetChar();
0536: 10       PUSH  X
0537: 7C 03 9B LCALL 0x039B
053A: 20       POP   X
053B: 54 00    MOV   [X+0],A
(0090) 	if (InputChar == CR) InputChar = UART_cGetChar();
053D: 3D 00 0D CMP   [X+0],13
0540: B0 26    JNZ   0x0567
0542: 10       PUSH  X
0543: 7C 03 9B LCALL 0x039B
0546: 20       POP   X
0547: 54 00    MOV   [X+0],A
0549: 80 1D    JMP   0x0567
(0091) 	while ((InputChar != CR) && (Index<sizeof(InBuffer)) && Delay) {
(0092) 		InBuffer[Index++] = InputChar;
054B: 52 01    MOV   A,[X+1]
054D: 53 08    MOV   [__r1],A
054F: 55 09 00 MOV   [__r0],0
0552: 01 01    ADD   A,1
0554: 54 01    MOV   [X+1],A
0556: 06 08 33 ADD   [__r1],51
0559: 0E 09 00 ADC   [__r0],0
055C: 52 00    MOV   A,[X+0]
055E: 3F 08    MVI   [__r1],A
(0093) 		InputChar = UART_cGetChar();
0560: 10       PUSH  X
0561: 7C 03 9B LCALL 0x039B
0564: 20       POP   X
0565: 54 00    MOV   [X+0],A
0567: 3D 00 0D CMP   [X+0],13
056A: A0 0B    JZ    0x0576
056C: 3D 01 20 CMP   [X+1],32
056F: D0 06    JNC   0x0576
0571: 3C 11 00 CMP   [Delay],0
0574: BF D6    JNZ   0x054B
(0094) 		}
(0095) 	InBuffer[Index] = CR;
0576: 52 01    MOV   A,[X+1]
0578: 53 08    MOV   [__r1],A
057A: 55 09 00 MOV   [__r0],0
057D: 06 08 33 ADD   [__r1],51
0580: 0E 09 00 ADC   [__r0],0
0583: 50 0D    MOV   A,13
0585: 3F 08    MVI   [__r1],A
(0096) 	}
0587: 38 FE    ADD   SP,254
0589: 20       POP   X
058A: 7F       RET   
(0097) 
(0098) void WriteDisplay(byte Length) {
_WriteDisplay:
  InputChar            --> X+0
  Length               --> X-4
058B: 10       PUSH  X
058C: 4F       MOV   X,SP
058D: 38 01    ADD   SP,1
(0099) // Send command to display and wait for an ACK
(0100) 	char InputChar;
(0101) 	SwitchUART(1);
058F: 50 01    MOV   A,1
0591: 08       PUSH  A
0592: 9E EB    CALL  _SwitchUART
0594: 38 FF    ADD   SP,255
(0102) 	UART_Write(&OutBuffer[0], Length);
0596: 10       PUSH  X
0597: 52 FC    MOV   A,[X-4]
0599: 08       PUSH  A
059A: 50 00    MOV   A,0
059C: 08       PUSH  A
059D: 50 13    MOV   A,19
059F: 08       PUSH  A
05A0: 7C 03 DA LCALL 0x03DA
05A3: 38 FD    ADD   SP,253
(0103) 	InputChar = UART_cGetChar();
05A5: 7C 03 9B LCALL 0x039B
05A8: 20       POP   X
05A9: 54 00    MOV   [X+0],A
(0104) 	if (InputChar != ACK) {
05AB: 3D 00 06 CMP   [X+0],6
05AE: A0 04    JZ    0x05B3
(0105) // Set a breakpoint here to check for errors
(0106) 		Index = 0;
05B0: 55 12 00 MOV   [Index],0
(0107) 		}
(0108) 	}
05B3: 38 FF    ADD   SP,255
05B5: 20       POP   X
05B6: 7F       RET   
(0109) 
(0110) void InitializeVinculum(void) {
_InitializeVinculum:
  i                    --> X+0
05B7: 10       PUSH  X
05B8: 4F       MOV   X,SP
05B9: 38 01    ADD   SP,1
(0111) 	byte i;
(0112) // Vinculum can send a variety of messages depending upon the hardware configuration
(0113) 	ReadVinculum();
05BB: 9F 62    CALL  _ReadVinculum
(0114) 	OutBuffer[0] = 'E';		// Look for an echo
05BD: 55 13 45 MOV   [OutBuffer],69
(0115) 	OutBuffer[1] = CR;
05C0: 55 14 0D MOV   [OutBuffer+1],13
05C3: 80 0A    JMP   0x05CE
(0116) 	while (InBuffer[0] != 'E') {
(0117) 		WriteVinculum(2);
05C5: 50 02    MOV   A,2
05C7: 08       PUSH  A
05C8: 9F 00    CALL  _WriteVinculum
05CA: 38 FF    ADD   SP,255
(0118) 		ReadVinculum();
05CC: 9F 51    CALL  _ReadVinculum
05CE: 3C 33 45 CMP   [InBuffer],69
05D1: BF F3    JNZ   0x05C5
(0119) 		}
(0120) // Set Vinculum baud rate to 125000
(0121) 	for (i=0; i<sizeof(SetBaudRate); i++) OutBuffer[i] = SetBaudRate[i];
05D3: 56 00 00 MOV   [X+0],0
05D6: 80 2A    JMP   0x0601
05D8: 52 00    MOV   A,[X+0]
05DA: 53 08    MOV   [__r1],A
05DC: 55 09 00 MOV   [__r0],0
05DF: 06 08 CE ADD   [__r1],206
05E2: 0E 09 01 ADC   [__r0],1
05E5: 51 09    MOV   A,[__r0]
05E7: 10       PUSH  X
05E8: 58 08    MOV   X,[__r1]
05EA: 28       ROMX  
05EB: 20       POP   X
05EC: 53 09    MOV   [__r0],A
05EE: 52 00    MOV   A,[X+0]
05F0: 53 06    MOV   [__r3],A
05F2: 55 07 00 MOV   [__r2],0
05F5: 06 06 13 ADD   [__r3],19
05F8: 0E 07 00 ADC   [__r2],0
05FB: 51 09    MOV   A,[__r0]
05FD: 3F 06    MVI   [__r3],A
05FF: 77 00    INC   [X+0]
0601: 3D 00 09 CMP   [X+0],9
0604: CF D3    JC    0x05D8
(0122) 	WriteVinculum(sizeof(SetBaudRate)-1);
0606: 50 08    MOV   A,8
0608: 08       PUSH  A
0609: 9E BF    CALL  _WriteVinculum
060B: 38 FF    ADD   SP,255
(0123) 	ReadVinculum();			// Vinculum returns a prompt immediately
060D: 9F 10    CALL  _ReadVinculum
(0124) 	}
060F: 38 FF    ADD   SP,255
0611: 20       POP   X
0612: 7F       RET   
(0125) 
(0126) void InitializeDisplay(void) {
_InitializeDisplay:
  i                    --> X+0
0613: 10       PUSH  X
0614: 4F       MOV   X,SP
0615: 38 01    ADD   SP,1
(0127) 	byte i;
(0128) // Set the Display baud rate to 125000
(0129) 	OutBuffer[0] = 'U';
0617: 55 13 55 MOV   [OutBuffer],85
(0130) 	WriteDisplay(1);
061A: 50 01    MOV   A,1
061C: 08       PUSH  A
061D: 9F 6C    CALL  _WriteDisplay
(0131) // Clear the screen and write a Signon
(0132) 	OutBuffer[0] = 'E';
061F: 55 13 45 MOV   [OutBuffer],69
(0133) 	WriteDisplay(1);
0622: 50 01    MOV   A,1
0624: 08       PUSH  A
0625: 9F 64    CALL  _WriteDisplay
0627: 38 FE    ADD   SP,254
(0134) 	OutBuffer[0] = 'F';		// Choose medium font size
0629: 55 13 46 MOV   [OutBuffer],70
(0135) 	OutBuffer[1] = 1;
062C: 55 14 01 MOV   [OutBuffer+1],1
(0136) 	WriteDisplay(2);
062F: 50 02    MOV   A,2
0631: 08       PUSH  A
0632: 9F 57    CALL  _WriteDisplay
(0137) 	OutBuffer[0] = 'O';		// Set Opaque text
0634: 55 13 4F MOV   [OutBuffer],79
(0138) 	WriteDisplay(2);
0637: 50 02    MOV   A,2
0639: 08       PUSH  A
063A: 9F 4F    CALL  _WriteDisplay
063C: 38 FE    ADD   SP,254
(0139) 	OutBuffer[0] = 'T';
063E: 55 13 54 MOV   [OutBuffer],84
(0140) 	OutBuffer[3] = 0;		// Row
0641: 55 16 00 MOV   [OutBuffer+3],0
(0141) 	OutBuffer[4] = 0;		// High byte of Blue
0644: 55 17 00 MOV   [23],0
(0142) 	OutBuffer[5] = 0x1F;	// Low byte of Blue
0647: 55 18 1F MOV   [24],31
(0143) 	for (i=0; i<sizeof(SignOn)-1; i++) {
064A: 56 00 00 MOV   [X+0],0
064D: 80 24    JMP   0x0672
(0144) 		OutBuffer[1] = SignOn[i];
064F: 52 00    MOV   A,[X+0]
0651: 53 08    MOV   [__r1],A
0653: 55 09 00 MOV   [__r0],0
0656: 06 08 A0 ADD   [__r1],160
0659: 0E 09 01 ADC   [__r0],1
065C: 51 09    MOV   A,[__r0]
065E: 10       PUSH  X
065F: 58 08    MOV   X,[__r1]
0661: 28       ROMX  
0662: 20       POP   X
0663: 53 14    MOV   [OutBuffer+1],A
(0145) 		OutBuffer[2] = i;	// Column
0665: 52 00    MOV   A,[X+0]
0667: 53 15    MOV   [OutBuffer+2],A
(0146) 		WriteDisplay(6);
0669: 50 06    MOV   A,6
066B: 08       PUSH  A
066C: 9F 1D    CALL  _WriteDisplay
066E: 38 FF    ADD   SP,255
0670: 77 00    INC   [X+0]
0672: 3D 00 0F CMP   [X+0],15
0675: CF D9    JC    0x064F
(0147) 		}
(0148) 	}
0677: 38 FF    ADD   SP,255
0679: 20       POP   X
067A: 7F       RET   
(0149) 
(0150) void ReconfigureUART(void) {
(0151) 	UART_Stop();
_ReconfigureUART:
067B: 10       PUSH  X
067C: 7C 03 28 LCALL 0x0328
067F: 20       POP   X
(0152) // Now reset my UART baudrate to 125000, change the UART clock from VC3 to VC2
(0153) 	DCB02IN = (DCB02IN & 0xf0) | 6;		// VC3 = 1, VC2 = 6
0680: 71 10    OR    F,16
0682: 5D 29    MOV   A,REG[41]
0684: 53 09    MOV   [__r0],A
0686: 70 EF    AND   F,239
0688: 26 09 F0 AND   [__r0],240
068B: 2E 09 06 OR    [__r0],6
068E: 71 10    OR    F,16
0690: 51 09    MOV   A,[__r0]
0692: 60 29    MOV   REG[41],A
0694: 70 EF    AND   F,239
(0154) 	DCB03IN = (DCB03IN & 0xf0) | 6;		// RX too
0696: 71 10    OR    F,16
0698: 5D 2D    MOV   A,REG[45]
069A: 53 09    MOV   [__r0],A
069C: 70 EF    AND   F,239
069E: 26 09 F0 AND   [__r0],240
06A1: 2E 09 06 OR    [__r0],6
06A4: 71 10    OR    F,16
06A6: 51 09    MOV   A,[__r0]
06A8: 60 2D    MOV   REG[45],A
06AA: 70 EF    AND   F,239
(0155) 	UART_Start(UART_PARITY_NONE);
06AC: 10       PUSH  X
06AD: 50 00    MOV   A,0
06AF: 7C 03 21 LCALL 0x0321
06B2: 20       POP   X
(0156) // Setup VC3 so that it now overflows at 8KHz
(0157) 	OSC_CR3 = 250;		// VC3 divider
06B3: 71 10    OR    F,16
06B5: 62 DF FA MOV   REG[223],250
06B8: 70 EF    AND   F,239
(0158) 	}
06BA: 7F       RET   
(0159) 
(0160) void Display_NoDrive(void) {
_Display_NoDrive:
  i                    --> X+0
06BB: 10       PUSH  X
06BC: 4F       MOV   X,SP
06BD: 38 01    ADD   SP,1
(0161) 	byte i;
(0162) 	InitializeDisplay();
06BF: 9F 52    CALL  _InitializeDisplay
(0163) 	OutBuffer[0] = 'T';
06C1: 55 13 54 MOV   [OutBuffer],84
(0164) 	OutBuffer[3] = 5;		// Row
06C4: 55 16 05 MOV   [OutBuffer+3],5
(0165) 	OutBuffer[4] = 0xF8;	// High byte of Red
06C7: 55 17 F8 MOV   [23],248
(0166) 	OutBuffer[5] = 0;		// Low byte of Red
06CA: 55 18 00 MOV   [24],0
(0167) 	for (i=0; i<sizeof(NoDrive)-1; i++) {
06CD: 56 00 00 MOV   [X+0],0
06D0: 80 24    JMP   0x06F5
(0168) 		OutBuffer[1] = NoDrive[i];
06D2: 52 00    MOV   A,[X+0]
06D4: 53 08    MOV   [__r1],A
06D6: 55 09 00 MOV   [__r0],0
06D9: 06 08 B0 ADD   [__r1],176
06DC: 0E 09 01 ADC   [__r0],1
06DF: 51 09    MOV   A,[__r0]
06E1: 10       PUSH  X
06E2: 58 08    MOV   X,[__r1]
06E4: 28       ROMX  
06E5: 20       POP   X
06E6: 53 14    MOV   [OutBuffer+1],A
(0169) 		OutBuffer[2] = i;
06E8: 52 00    MOV   A,[X+0]
06EA: 53 15    MOV   [OutBuffer+2],A
(0170) 		WriteDisplay(6);
06EC: 50 06    MOV   A,6
06EE: 08       PUSH  A
06EF: 9E 9A    CALL  _WriteDisplay
06F1: 38 FF    ADD   SP,255
06F3: 77 00    INC   [X+0]
06F5: 3D 00 0E CMP   [X+0],14
06F8: CF D9    JC    0x06D2
(0171) 		}
(0172) 	Wait(2);		// User will insert a drive or power off
06FA: 50 02    MOV   A,2
06FC: 08       PUSH  A
06FD: 9D 6D    CALL  _Wait
06FF: 38 FF    ADD   SP,255
(0173) 	Index = 0;		// Reset the file pointer
0701: 55 12 00 MOV   [Index],0
(0174) 	}
0704: 38 FF    ADD   SP,255
0706: 20       POP   X
0707: 7F       RET   
(0175) 
(0176) void Display_NoFiles(void) {
_Display_NoFiles:
  i                    --> X+0
0708: 10       PUSH  X
0709: 4F       MOV   X,SP
070A: 38 01    ADD   SP,1
(0177) 	byte i;
(0178) 	InitializeDisplay();
070C: 9F 05    CALL  _InitializeDisplay
(0179) 	OutBuffer[0] = 'T';
070E: 55 13 54 MOV   [OutBuffer],84
(0180) 	OutBuffer[3] = 7;		// Row
0711: 55 16 07 MOV   [OutBuffer+3],7
(0181) 	OutBuffer[4] = 7;		// High byte of Green
0714: 55 17 07 MOV   [23],7
(0182) 	OutBuffer[5] = 0xE0;	// Low byte of Green
0717: 55 18 E0 MOV   [24],224
(0183) 	for (i=0; i<sizeof(NoFiles)-1; i++) {
071A: 56 00 00 MOV   [X+0],0
071D: 80 24    JMP   0x0742
(0184) 		OutBuffer[1] = NoFiles[i];
071F: 52 00    MOV   A,[X+0]
0721: 53 08    MOV   [__r1],A
0723: 55 09 00 MOV   [__r0],0
0726: 06 08 BF ADD   [__r1],191
0729: 0E 09 01 ADC   [__r0],1
072C: 51 09    MOV   A,[__r0]
072E: 10       PUSH  X
072F: 58 08    MOV   X,[__r1]
0731: 28       ROMX  
0732: 20       POP   X
0733: 53 14    MOV   [OutBuffer+1],A
(0185) 		OutBuffer[2] = i;
0735: 52 00    MOV   A,[X+0]
0737: 53 15    MOV   [OutBuffer+2],A
(0186) 		WriteDisplay(6);
0739: 50 06    MOV   A,6
073B: 08       PUSH  A
073C: 9E 4D    CALL  _WriteDisplay
073E: 38 FF    ADD   SP,255
0740: 77 00    INC   [X+0]
0742: 3D 00 0E CMP   [X+0],14
0745: CF D9    JC    0x071F
(0187) 		}
(0188) 	}
0747: 38 FF    ADD   SP,255
0749: 20       POP   X
074A: 7F       RET   
(0189) void ConvertToASCII(byte Value) {
_ConvertToASCII:
  T                    --> X+1
  H                    --> X+0
  Value                --> X-4
074B: 10       PUSH  X
074C: 4F       MOV   X,SP
074D: 38 02    ADD   SP,2
(0190) 	byte H, T;
(0191) 	H = Value/100;
074F: 50 64    MOV   A,100
0751: 08       PUSH  A
0752: 52 FC    MOV   A,[X-4]
0754: 08       PUSH  A
0755: 7C 09 92 LCALL __divmodu_8X8_8
0758: 18       POP   A
0759: 54 00    MOV   [X+0],A
075B: 38 FF    ADD   SP,255
(0192) 	Value -= H * 100;
075D: 52 00    MOV   A,[X+0]
075F: 60 E8    MOV   REG[232],A
0761: 62 E9 64 MOV   REG[233],100
0764: 40       NOP   
0765: 5D EB    MOV   A,REG[235]
0767: 53 09    MOV   [__r0],A
0769: 52 FC    MOV   A,[X-4]
076B: 12 09    SUB   A,[__r0]
076D: 54 FC    MOV   [X-4],A
(0193) 	T = Value/10;
076F: 50 0A    MOV   A,10
0771: 08       PUSH  A
0772: 52 FC    MOV   A,[X-4]
0774: 08       PUSH  A
0775: 7C 09 92 LCALL __divmodu_8X8_8
0778: 18       POP   A
0779: 54 01    MOV   [X+1],A
077B: 38 FF    ADD   SP,255
(0194) 	Value -= T * 10;
077D: 52 01    MOV   A,[X+1]
077F: 60 E8    MOV   REG[232],A
0781: 62 E9 0A MOV   REG[233],10
0784: 40       NOP   
0785: 5D EB    MOV   A,REG[235]
0787: 53 09    MOV   [__r0],A
0789: 52 FC    MOV   A,[X-4]
078B: 12 09    SUB   A,[__r0]
078D: 54 FC    MOV   [X-4],A
(0195) 	OutBuffer[4] = H + '0';
078F: 52 00    MOV   A,[X+0]
0791: 01 30    ADD   A,48
0793: 53 17    MOV   [23],A
(0196) 	OutBuffer[5] = T + '0';
0795: 52 01    MOV   A,[X+1]
0797: 01 30    ADD   A,48
0799: 53 18    MOV   [24],A
(0197) 	OutBuffer[6] = Value + '0';
079B: 52 FC    MOV   A,[X-4]
079D: 01 30    ADD   A,48
079F: 53 19    MOV   [25],A
(0198) 	}
07A1: 38 FE    ADD   SP,254
07A3: 20       POP   X
07A4: 7F       RET   
(0199) 
(0200) void main() {
_main:
  i                    --> X+0
07A5: 10       PUSH  X
07A6: 4F       MOV   X,SP
07A7: 38 01    ADD   SP,1
(0201) 	byte i;
(0202) // UART is initially connected to the Vinculum
(0203) // UART is initially set to 9600 baud to match Vinculum's power-on value
(0204) 	UART_Start(UART_PARITY_NONE);
07A9: 10       PUSH  X
07AA: 50 00    MOV   A,0
07AC: 7C 03 21 LCALL 0x0321
07AF: 20       POP   X
(0205) 	InitializeVinculum();
07B0: 9E 05    CALL  _InitializeVinculum
(0206) 	ReconfigureUART();
07B2: 9E C7    CALL  _ReconfigureUART
(0207) 	InitializeDisplay();
07B4: 9E 5D    CALL  _InitializeDisplay
(0208) // Wait for Vinculum to be ready
(0209) 	ReadVinculum();				// Vinculum will send another prompt at new baud rate
07B6: 9D 67    CALL  _ReadVinculum
(0210) 	INT_MSK0 |= VC3_Interrupt;	// Enable for Wait/Delay function
07B8: 43 E0 80 OR    REG[224],128
(0211) 	M8C_EnableGInt;				// This is the first time that they have been enabled
07BB: 71 01    OR    F,1
07BD: 81 CD    JMP   0x098B
(0212) // Initialization complete, enter the main loop
(0213) 	while (1) {
(0214) // Check if a flash drive is present, Vinculum responds with a prompt (=yes) or 'No Disk' (=no)
(0215) 		OutBuffer[0] = CR;
07BF: 55 13 0D MOV   [OutBuffer],13
(0216) 		WriteVinculum(1);
07C2: 50 01    MOV   A,1
07C4: 08       PUSH  A
07C5: 9D 03    CALL  _WriteVinculum
07C7: 38 FF    ADD   SP,255
(0217) 		ReadVinculum();
07C9: 9D 54    CALL  _ReadVinculum
(0218) 		if (InBuffer[0] == 'N') Display_NoDrive();
07CB: 3C 33 4E CMP   [InBuffer],78
07CE: B0 05    JNZ   0x07D4
07D0: 9E E9    CALL  _Display_NoDrive
07D2: 81 B8    JMP   0x098B
(0219) 		else {
(0220) // Check if <index>.img is present using 'DIR <index>.img'
(0221) 			for (i=0; i<sizeof(FileCommand); i++) OutBuffer[i] = FileCommand[i];
07D4: 56 00 00 MOV   [X+0],0
07D7: 80 2A    JMP   0x0802
07D9: 52 00    MOV   A,[X+0]
07DB: 53 08    MOV   [__r1],A
07DD: 55 09 00 MOV   [__r0],0
07E0: 06 08 D7 ADD   [__r1],215
07E3: 0E 09 01 ADC   [__r0],1
07E6: 51 09    MOV   A,[__r0]
07E8: 10       PUSH  X
07E9: 58 08    MOV   X,[__r1]
07EB: 28       ROMX  
07EC: 20       POP   X
07ED: 53 09    MOV   [__r0],A
07EF: 52 00    MOV   A,[X+0]
07F1: 53 06    MOV   [__r3],A
07F3: 55 07 00 MOV   [__r2],0
07F6: 06 06 13 ADD   [__r3],19
07F9: 0E 07 00 ADC   [__r2],0
07FC: 51 09    MOV   A,[__r0]
07FE: 3F 06    MVI   [__r3],A
0800: 77 00    INC   [X+0]
0802: 3D 00 0D CMP   [X+0],13
0805: CF D3    JC    0x07D9
(0222) 			ConvertToASCII(++Index);
0807: 06 12 01 ADD   [Index],1
080A: 51 12    MOV   A,[Index]
080C: 08       PUSH  A
080D: 9F 3C    CALL  _ConvertToASCII
(0223) 			WriteVinculum(sizeof(FileCommand)-1);
080F: 50 0C    MOV   A,12
0811: 08       PUSH  A
0812: 9C B6    CALL  _WriteVinculum
0814: 38 FE    ADD   SP,254
(0224) 			ReadVinculum();
0816: 9D 07    CALL  _ReadVinculum
(0225) // Vinculum responds with "<index>.img <size>" if file is present
(0226) 			if (InBuffer[0] == OutBuffer[4]) {
0818: 51 33    MOV   A,[InBuffer]
081A: 3A 17    CMP   A,[23]
081C: B1 5D    JNZ   0x097A
(0227) // .img file is present, get its size and copy it to the display
(0228) // Note that PSoC is Big Endian, size is in Little Endian
(0229) 				FileSize = InBuffer[10];
081E: 5F 0D 3D MOV   [FileSize+3],[61]
0821: 55 0C 00 MOV   [FileSize+2],0
0824: 55 0B 00 MOV   [FileSize+1],0
0827: 55 0A 00 MOV   [FileSize],0
(0230) 				FileSize = InBuffer[8] + (InBuffer[9]<<8) + (FileSize<<16) + 1;
082A: 5F 09 0A MOV   [__r0],[FileSize]
082D: 5F 08 0B MOV   [__r1],[FileSize+1]
0830: 5F 07 0C MOV   [__r2],[FileSize+2]
0833: 5F 06 0D MOV   [__r3],[FileSize+3]
0836: 50 10    MOV   A,16
0838: 65 06    ASL   [__r3]
083A: 6B 07    RLC   [__r2]
083C: 6B 08    RLC   [__r1]
083E: 6B 09    RLC   [__r0]
0840: 78       DEC   A
0841: BF F6    JNZ   0x0838
0843: 5F 05 3C MOV   [__r4],[60]
0846: 55 04 00 MOV   [__r5],0
0849: 51 3B    MOV   A,[59]
084B: 02 04    ADD   A,[__r5]
084D: 53 04    MOV   [__r5],A
084F: 50 00    MOV   A,0
0851: 0A 05    ADC   A,[__r4]
0853: 5F 02 04 MOV   [__r7],[__r5]
0856: 53 03    MOV   [__r6],A
0858: 47 03 80 TST   [__r6],128
085B: A0 09    JZ    0x0865
085D: 55 04 FF MOV   [__r5],255
0860: 55 05 FF MOV   [__r4],255
0863: 80 07    JMP   0x086B
0865: 55 04 00 MOV   [__r5],0
0868: 55 05 00 MOV   [__r4],0
086B: 51 02    MOV   A,[__r7]
086D: 02 06    ADD   A,[__r3]
086F: 53 06    MOV   [__r3],A
0871: 51 03    MOV   A,[__r6]
0873: 0A 07    ADC   A,[__r2]
0875: 53 07    MOV   [__r2],A
0877: 51 04    MOV   A,[__r5]
0879: 0A 08    ADC   A,[__r1]
087B: 53 08    MOV   [__r1],A
087D: 51 05    MOV   A,[__r4]
087F: 0A 09    ADC   A,[__r0]
0881: 53 09    MOV   [__r0],A
0883: 51 06    MOV   A,[__r3]
0885: 01 01    ADD   A,1
0887: 53 0D    MOV   [FileSize+3],A
0889: 51 07    MOV   A,[__r2]
088B: 09 00    ADC   A,0
088D: 53 0C    MOV   [FileSize+2],A
088F: 51 08    MOV   A,[__r1]
0891: 09 00    ADC   A,0
0893: 53 0B    MOV   [FileSize+1],A
0895: 51 09    MOV   A,[__r0]
0897: 09 00    ADC   A,0
0899: 53 0A    MOV   [FileSize],A
(0231) 				OutBuffer[0] = 0;
089B: 55 13 00 MOV   [OutBuffer],0
(0232) 				OutBuffer[1] = 'R';
089E: 55 14 52 MOV   [OutBuffer+1],82
(0233) 				OutBuffer[2] = 'D';
08A1: 55 15 44 MOV   [OutBuffer+2],68
(0234) 				WriteVinculum(sizeof(FileCommand)-2);
08A4: 50 0B    MOV   A,11
08A6: 08       PUSH  A
08A7: 9C 21    CALL  _WriteVinculum
08A9: 38 FF    ADD   SP,255
(0235) // Change to data passthrough: data from Vinculum goes directly to Display
(0236) 				DCB03OU  = 6;			// Enable RXout
08AB: 71 10    OR    F,16
08AD: 62 2E 06 MOV   REG[46],6
08B0: 70 EF    AND   F,239
(0237) 				RDI0LT1 &= 0xf3;		// RXout drives D_TX
08B2: 41 B4 F3 AND   REG[180],243
08B5: 80 06    JMP   0x08BC
(0238) // Note that the ap will hang if the Flash Drive is removed during this file read
(0239) // Allow for this in the next version
(0240) 				while (FileSize--) UART_cGetChar();
08B7: 10       PUSH  X
08B8: 7C 03 9B LCALL 0x039B
08BB: 20       POP   X
08BC: 5F 09 0A MOV   [__r0],[FileSize]
08BF: 5F 08 0B MOV   [__r1],[FileSize+1]
08C2: 5F 07 0C MOV   [__r2],[FileSize+2]
08C5: 5F 06 0D MOV   [__r3],[FileSize+3]
08C8: 16 0D 01 SUB   [FileSize+3],1
08CB: 51 07    MOV   A,[__r2]
08CD: 19 00    SBB   A,0
08CF: 53 0C    MOV   [FileSize+2],A
08D1: 51 08    MOV   A,[__r1]
08D3: 19 00    SBB   A,0
08D5: 53 0B    MOV   [FileSize+1],A
08D7: 51 09    MOV   A,[__r0]
08D9: 19 00    SBB   A,0
08DB: 53 0A    MOV   [FileSize],A
08DD: 3C 09 00 CMP   [__r0],0
08E0: BF D6    JNZ   0x08B7
08E2: 3C 08 00 CMP   [__r1],0
08E5: BF D1    JNZ   0x08B7
08E7: 3C 07 00 CMP   [__r2],0
08EA: BF CC    JNZ   0x08B7
08EC: 3C 06 00 CMP   [__r3],0
08EF: BF C7    JNZ   0x08B7
(0241) // Now switch back
(0242) 				DCB03OU  = 0;			// Disable RXout
08F1: 71 10    OR    F,16
08F3: 62 2E 00 MOV   REG[46],0
08F6: 70 EF    AND   F,239
(0243) 				RDI0LT1 |= 0x0f;		// Set D_TX high
08F8: 43 B4 0F OR    REG[180],15
(0244) 				ReadVinculum();
08FB: 9C 22    CALL  _ReadVinculum
(0245) // Now check if an MP3 file is present
(0246) 				for (i=0; i<sizeof(MP3); i++) if (MP3[i]) OutBuffer[i] = MP3[i];
08FD: 56 00 00 MOV   [X+0],0
0900: 80 42    JMP   0x0943
0902: 52 00    MOV   A,[X+0]
0904: 53 08    MOV   [__r1],A
0906: 55 09 00 MOV   [__r0],0
0909: 06 08 E4 ADD   [__r1],228
090C: 0E 09 01 ADC   [__r0],1
090F: 51 09    MOV   A,[__r0]
0911: 10       PUSH  X
0912: 58 08    MOV   X,[__r1]
0914: 28       ROMX  
0915: 20       POP   X
0916: 39 00    CMP   A,0
0918: A0 28    JZ    0x0941
091A: 52 00    MOV   A,[X+0]
091C: 53 08    MOV   [__r1],A
091E: 55 09 00 MOV   [__r0],0
0921: 06 08 E4 ADD   [__r1],228
0924: 0E 09 01 ADC   [__r0],1
0927: 51 09    MOV   A,[__r0]
0929: 10       PUSH  X
092A: 58 08    MOV   X,[__r1]
092C: 28       ROMX  
092D: 20       POP   X
092E: 53 09    MOV   [__r0],A
0930: 52 00    MOV   A,[X+0]
0932: 53 06    MOV   [__r3],A
0934: 55 07 00 MOV   [__r2],0
0937: 06 06 13 ADD   [__r3],19
093A: 0E 07 00 ADC   [__r2],0
093D: 51 09    MOV   A,[__r0]
093F: 3F 06    MVI   [__r3],A
0941: 77 00    INC   [X+0]
0943: 3D 00 0D CMP   [X+0],13
0946: CF BB    JC    0x0902
(0247) 				WriteVinculum(sizeof(FileCommand)-1);
0948: 50 0C    MOV   A,12
094A: 08       PUSH  A
094B: 9B 7D    CALL  _WriteVinculum
094D: 38 FF    ADD   SP,255
(0248) 				ReadVinculum();
094F: 9B CE    CALL  _ReadVinculum
(0249) 				if (OutBuffer[4] == InBuffer[0]) {
0951: 51 17    MOV   A,[23]
0953: 3A 33    CMP   A,[InBuffer]
0955: B0 1B    JNZ   0x0971
(0250) // MP3 file is present, play it
(0251) 					OutBuffer[0] = 'V';
0957: 55 13 56 MOV   [OutBuffer],86
(0252) 					OutBuffer[1] = 'P';
095A: 55 14 50 MOV   [OutBuffer+1],80
(0253) 					OutBuffer[2] = 'F';
095D: 55 15 46 MOV   [OutBuffer+2],70
(0254) 					WriteVinculum(sizeof(FileCommand)-1);
0960: 50 0C    MOV   A,12
0962: 08       PUSH  A
0963: 9B 65    CALL  _WriteVinculum
0965: 38 FF    ADD   SP,255
(0255) // Disable timeout while the MP3 file plays
(0256) // If the flash drive is removed while the file is playing the ap will hang.
(0257) // Fix this in the next version, reset the system for now
(0258) 					INT_MSK0 &= ~VC3_Interrupt;
0967: 41 E0 7F AND   REG[224],127
(0259) 					ReadVinculum();
096A: 9B B3    CALL  _ReadVinculum
(0260) 					INT_MSK0 |= VC3_Interrupt;
096C: 43 E0 80 OR    REG[224],128
(0261) 					}
096F: 80 1B    JMP   0x098B
(0262) 				else Wait(60);		// Display picture for one minute if no MP3 file
0971: 50 3C    MOV   A,60
0973: 08       PUSH  A
0974: 9A F6    CALL  _Wait
0976: 38 FF    ADD   SP,255
(0263) 				}
0978: 80 12    JMP   0x098B
(0264) 			else {
(0265) // Check the special case of no .img files
(0266) 				if (Index == 1) Display_NoFiles();
097A: 3C 12 01 CMP   [Index],1
097D: B0 03    JNZ   0x0981
097F: 9D 87    CALL  _Display_NoFiles
(0267) 				Wait(2);
0981: 50 02    MOV   A,2
0983: 08       PUSH  A
0984: 9A E6    CALL  _Wait
0986: 38 FF    ADD   SP,255
(0268) 				Index = 0;			// At end of files, start again
0988: 55 12 00 MOV   [Index],0
098B: 8E 33    JMP   0x07BF
(0269) 				}
(0270) 			}
(0271) 		}
(0272) 	}
FILE: <library>
098D: 38 FF    ADD   SP,255
098F: 20       POP   X
0990: 8F FF    JMP   0x0990
__divmodu_8X8_8:
0992: 10       PUSH  X
0993: 4F       MOV   X,SP
0994: 7C 09 9D LCALL __i_div8_block_util
0997: 51 01    MOV   A,[__rX]
0999: 54 FB    MOV   [X-5],A
099B: 20       POP   X
099C: 7F       RET   
__i_div8_block_util:
099D: 55 01 00 MOV   [__rX],0
09A0: 55 00 08 MOV   [__rY],8
09A3: 66 FC    ASL   [X-4]
09A5: 6B 01    RLC   [__rX]
09A7: 51 01    MOV   A,[__rX]
09A9: 1B FB    SBB   A,[X-5]
09AB: C0 05    JC    0x09B1
09AD: 53 01    MOV   [__rX],A
09AF: 77 FC    INC   [X-4]
09B1: 7A 00    DEC   [__rY]
09B3: BF EF    JNZ   0x09A3
09B5: 7F       RET   
--------------------------------------------------------------------------------


PSoC Designer Version: 4.3.1884.0

Copyright (C) 1994 - 2001 ImageCraft
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Code Compressor V1.09
ICCM8C version V1.65
